name: .NET CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Compute Version
      id: set-version
      run: |
        VERSION="0.0.${{ github.run_number }}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore -c Release /p:Version="${{ env.VERSION }}"

    - name: Test
      run: dotnet test --no-build -c Release --verbosity normal

    - name: Pack
      run: dotnet pack src/FourSer.Gen.Nuget/FourSer.Gen.Nuget.csproj --no-build -c Release -o out /p:Version="${{ env.VERSION }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: out/

    - name: Build Package Test Project
      run: dotnet build tests/Serializer.Package.Tests/Serializer.Package.Tests.sln -c Release

    - name: Run Package Test Project
      run: dotnet run --project tests/Serializer.Package.Tests/Serializer.Package.Tests.csproj --no-build -c Release

  NugetUpload:
    needs: build
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - name: Download NuGet Package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nuget-packages

    - name: Get Secrets
      uses: bitwarden/sm-action@v2
      with:
        access_token: ${{ secrets.BW_ACCESS_TOKEN }}
        base_url: https://vault.bitwarden.eu
        secrets: |
          265b2fb6-2cf0-4859-9bc8-b24c00ab4378 > NUGET_API_KEY

    - name: Upload to NuGet.org
      run: |
        dotnet nuget push "nuget-packages/*.nupkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json
        echo "Version: ${{ needs.build.outputs.version }}"