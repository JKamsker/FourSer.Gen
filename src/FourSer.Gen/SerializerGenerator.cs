using System.Collections.Immutable;
using System.Reflection;
using System.Text;
using FourSer.Gen.CodeGenerators;
using FourSer.Gen.Helpers;
using FourSer.Gen.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ConstructorInfo = FourSer.Gen.Models.ConstructorInfo;

namespace FourSer.Gen;

[Generator]
public class SerializerGenerator : IIncrementalGenerator
{
    public static bool BenchmarkMode { get; set; }
    private static readonly DiagnosticDescriptor s_invalidCollectionTypeArgument = new
    (
        "FS0001",
        "Invalid collection type argument",
        "The type '{0}' in the collection '{1}' must have the [GenerateSerializer] attribute because it is not a primitive type",
        "Usage",
        DiagnosticSeverity.Warning,
        true
    );

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(AddHelpers);

        var rawTypesToGenerate = context.SyntaxProvider
            .ForAttributeWithMetadataName
            (
                "FourSer.Contracts.GenerateSerializerAttribute",
                (node, _) => node is ClassDeclarationSyntax or StructDeclarationSyntax or RecordDeclarationSyntax,
                TypeInfoProvider.GetSemanticTargetForGeneration
            )
            .WithTrackingName("TypesWithGenerateSerializerAttribute")
            ;

        var nonNullableRawTypes = rawTypesToGenerate
                .Where(static m => m is not null)
                .WithTrackingName("NonNullableRawTypes")
            ;

        var typesToGenerate = nonNullableRawTypes
            .Select((x, _) => ModelTransformer.Transform(x!))
            .WithTrackingName("TransformedTypes");

        context.RegisterSourceOutput
        (
            typesToGenerate,
            (spc, source) => Execute(spc, source)
        );

        var allSerializers = typesToGenerate
            .SelectMany((type, _) =>
            {
                var fromMembers = type.Members
                    .Select(m => m.CustomSerializer)
                    .Where(s => s is not null)
                    .Select(s => s!.Value.SerializerTypeName);
                var fromDefaults = type.DefaultSerializers
                    .Select(d => d.SerializerTypeName);
                return fromMembers.Concat(fromDefaults);
            })
            .Collect()
            .Select((serializers, _) => serializers.Distinct().ToImmutableArray());

        context.RegisterSourceOutput(allSerializers, (spc, serializers) => GenerateSerializerCache(spc, serializers));
    }

    private static void GenerateSerializerCache(SourceProductionContext context, ImmutableArray<string> serializers)
    {
        if (serializers.IsEmpty)
        {
            return;
        }

        var sb = new IndentedStringBuilder();
        sb.WriteLine("// <auto-generated/>");
        sb.WriteLine();
        sb.WriteLine("namespace FourSer.Generated.Internal");
        using (sb.BeginBlock())
        {
            sb.WriteLine("/// <summary>");
            sb.WriteLine("/// This class is internal to the FourSer source generator.");
            sb.WriteLine("/// It is not intended for direct use and may change without notice.");
            sb.WriteLine("/// </summary>");
            sb.WriteLine("[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]");
            sb.WriteLine("internal static class __FourSer_Generated_Serializers");
            using (sb.BeginBlock())
            {
                foreach (var serializer in serializers)
                {
                    var fieldName = SanitizeTypeName(serializer);
                    sb.WriteLineFormat("public static readonly {0} {1} = new();", serializer, fieldName);
                }
            }
        }

        context.AddSource("__FourSer_Generated_Serializers.g.cs", sb.ToString());
    }

    public static string SanitizeTypeName(string typeName)
    {
        return typeName.Replace('.', '_').Replace('<', '_').Replace('>', '_');
    }

    private static void Execute(SourceProductionContext context, TypeToGenerate typeToGenerate)
    {
        if (BenchmarkMode)
        {
            return;
        }

        if (HasInvalidCollection(context, typeToGenerate))
        {
            return;
        }

        var sb = new IndentedStringBuilder();

        GenerateFileHeader(sb, typeToGenerate);
        GenerateClassDeclaration(sb, typeToGenerate);

        using (sb.BeginBlock())
        {
            PacketSizeGenerator.GenerateGetSize(sb, typeToGenerate);
            sb.WriteLine();

            if (typeToGenerate.Constructor is { ShouldGenerate: true } ctor && !typeToGenerate.IsRecord)
            {
                if (!ctor.Parameters.IsEmpty)
                {
                    GenerateConstructor(sb, typeToGenerate, ctor);
                    sb.WriteLine();
                }

                if (!ctor.HasParameterlessConstructor)
                {
                    GenerateParameterlessConstructor(sb, typeToGenerate);
                    sb.WriteLine();
                }
            }

            DeserializationGenerator.GenerateDeserialize(sb, typeToGenerate);
            sb.WriteLine();

            SerializationGenerator.GenerateSerialize(sb, typeToGenerate);

            if (!typeToGenerate.NestedTypes.IsEmpty)
            {
                NestedTypeGenerator.GenerateNestedTypes(sb, typeToGenerate.NestedTypes);
            }
        }

        var hintNameWithoutExtension = string.IsNullOrEmpty(typeToGenerate.Namespace)
            ? typeToGenerate.Name
            : $"{typeToGenerate.Namespace}.{typeToGenerate.Name}";
        var hintName = $"{hintNameWithoutExtension.Replace('.', '_')}.g.cs";

        context.AddSource(hintName, sb.ToString());
    }

    private static void GenerateFileHeader(IndentedStringBuilder sb, TypeToGenerate typeToGenerate)
    {
        sb.WriteLine("// <auto-generated/>");
        sb.WriteLine("using System;");
        sb.WriteLine("using System.Buffers.Binary;");
        sb.WriteLine("using System.Collections.Generic;");
        sb.WriteLine("using System.Linq;");
        sb.WriteLine("using System.Runtime.CompilerServices;");
        sb.WriteLine("using System.Text;");
        sb.WriteLine("using FourSer.Contracts;");
        sb.WriteLine("using System.IO;");
        sb.WriteLine("using FourSer.Gen.Helpers;");
        sb.WriteLine("using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;");
        sb.WriteLine("using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;");
        sb.WriteLine("using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;");
        sb.WriteLine("using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;");
        sb.WriteLine();
        if (!string.IsNullOrEmpty(typeToGenerate.Namespace))
        {
            sb.WriteLineFormat("namespace {0};", typeToGenerate.Namespace);
            sb.WriteLine();
        }
    }

    private static void GenerateClassDeclaration(IndentedStringBuilder sb, TypeToGenerate typeToGenerate)
    {
        var typeKeyword = typeToGenerate.IsValueType ? "struct" : "class";
        if (typeToGenerate.IsRecord)
        {
            typeKeyword = $"record {typeKeyword}";
        }

        sb.WriteLineFormat("public partial {0} {1} : ISerializable<{1}>", typeKeyword, typeToGenerate.Name);
    }

    internal static void GenerateConstructor(IndentedStringBuilder sb, TypeToGenerate typeToGenerate, ConstructorInfo ctor)
    {
        var ctorBuilder = new StringBuilder();
        ctorBuilder.AppendFormat("private {0}(", typeToGenerate.Name);

        var first = true;
        foreach (var p in ctor.Parameters)
        {
            if (!first)
            {
                ctorBuilder.Append(", ");
            }

            ctorBuilder.Append(p.TypeName);
            ctorBuilder.Append(' ');
            ctorBuilder.Append(p.Name.ToCamelCase());
            first = false;
        }

        ctorBuilder.Append(')');
        sb.WriteLine(ctorBuilder.ToString());

        using var _ = sb.BeginBlock();
        foreach (var parameter in ctor.Parameters)
        {
            sb.WriteLineFormat("this.{0} = {1};", parameter.Name, parameter.Name.ToCamelCase());
        }
    }

    internal static void GenerateParameterlessConstructor(IndentedStringBuilder sb, TypeToGenerate typeToGenerate)
    {
        if (typeToGenerate.IsValueType)
        {
            return;
        }

        sb.WriteLineFormat("public {0}()", typeToGenerate.Name);
        using var _ = sb.BeginBlock();
        foreach (var member in typeToGenerate.Members)
        {
            if (member.IsReadOnly)
            {
                continue;
            }

            sb.WriteLineFormat("this.{0} = default;", member.Name);
        }
    }

    private static bool HasInvalidCollection(SourceProductionContext context, TypeToGenerate typeToGenerate)
    {
        foreach (var member in typeToGenerate.Members)
        {
            if (!member.IsCollection || member.CollectionTypeInfo is null)
            {
                continue;
            }

            var collectionTypeInfo = member.CollectionTypeInfo.Value;
            if (collectionTypeInfo.IsElementUnmanagedType || collectionTypeInfo.IsElementStringType ||
                collectionTypeInfo.HasElementGenerateSerializerAttribute)
            {
                continue;
            }


            return true;
        }

        return false;
    }

    private static void AddHelpers(IncrementalGeneratorPostInitializationContext context)
    {
        var assembly = Assembly.GetExecutingAssembly();
        var names = assembly.GetManifestResourceNames();

        foreach (var file in names)
        {
            if (!file.StartsWith("FourSer.Gen.Resources.Code."))
            {
                continue;
            }

            using var stream = assembly.GetManifestResourceStream(file);
            if (stream is null)
            {
                continue;
            }

            using var reader = new StreamReader(stream);
            var source = reader.ReadToEnd();
            context.AddSource(file, source);
        }
    }
}
