using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using FourSer.Gen.Models;
using System.IO;
using System.Linq;
using System.Reflection;
using FourSer.Gen.CodeGenerators;
using FourSer.Gen.Helpers;
using System.Collections.Immutable;

namespace FourSer.Gen;

[Generator]
public class SerializerGenerator : IIncrementalGenerator
{
    private static readonly DiagnosticDescriptor s_invalidCollectionTypeArgument = new
    (
        "FSSG001",
        "Invalid collection type argument",
        "The type '{0}' in the collection '{1}' must have the [GenerateSerializer] attribute because it is not a primitive type.",
        "Usage",
        DiagnosticSeverity.Warning,
        true
    );

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(AddHelpers);

        var typesToGenerate = context.SyntaxProvider
            .ForAttributeWithMetadataName
            (
                "FourSer.Contracts.GenerateSerializerAttribute",
                predicate: (node, _) => node is ClassDeclarationSyntax or StructDeclarationSyntax or RecordDeclarationSyntax,
                transform: TypeInfoProvider.GetSemanticTargetForGeneration
            );

        var nonNullableTypes = typesToGenerate.Where(static m => m is not null);

        context.RegisterSourceOutput
        (
            nonNullableTypes,
            (spc, source) => Execute(spc, source!.Value)
        );
    }

    private static void Execute(SourceProductionContext context, TypeToGenerate typeToGenerate)
    {
        if (HasInvalidCollection(context, typeToGenerate))
        {
            return;
        }

        var sb = new IndentedStringBuilder();

        GenerateFileHeader(sb, typeToGenerate);
        GenerateClassDeclaration(sb, typeToGenerate);

        using (sb.BeginBlock())
        {
            PacketSizeGenerator.GenerateGetPacketSize(sb, typeToGenerate);
            sb.WriteLine();

            if (typeToGenerate.Constructor is { ShouldGenerate: true } ctor && !typeToGenerate.IsRecord)
            {
                if (!ctor.Parameters.IsEmpty)
                {
                    GenerateConstructor(sb, typeToGenerate, ctor);
                    sb.WriteLine();
                }

                if (!ctor.HasParameterlessConstructor)
                {
                    GenerateParameterlessConstructor(sb, typeToGenerate);
                    sb.WriteLine();
                }
            }

            DeserializationGenerator.GenerateDeserialize(sb, typeToGenerate);
            sb.WriteLine();

            SerializationGenerator.GenerateSerialize(sb, typeToGenerate);

            if (!typeToGenerate.NestedTypes.IsEmpty)
            {
                NestedTypeGenerator.GenerateNestedTypes(sb, typeToGenerate.NestedTypes);
            }
        }

        // Namespaces can contain '.', which is not allowed in file names.
        var hintName = $"{typeToGenerate.Namespace}.{typeToGenerate.Name}".Replace('.', '_');
        context.AddSource($"{hintName}.g.cs", sb.ToString());
    }

    private static void GenerateFileHeader(IndentedStringBuilder sb, TypeToGenerate typeToGenerate)
    {
        sb.WriteLine($"// <auto-generated/>");
        sb.WriteLine("using System;");
        sb.WriteLine("using System.Buffers.Binary;");
        sb.WriteLine("using System.Collections.Generic;");
        sb.WriteLine("using System.Linq;");
        sb.WriteLine("using System.Runtime.CompilerServices;");
        sb.WriteLine("using System.Text;");
        sb.WriteLine("using FourSer.Contracts;");
        sb.WriteLine($"using System.IO;");
        sb.WriteLine($"using FourSer.Gen.Helpers;");
        sb.WriteLine();
        sb.WriteLine($"namespace {typeToGenerate.Namespace};");
        sb.WriteLine();
    }

    private static void GenerateClassDeclaration(IndentedStringBuilder sb, TypeToGenerate typeToGenerate)
    {
        var typeKeyword = typeToGenerate.IsValueType ? "struct" : "class";
        if (typeToGenerate.IsRecord)
        {
            typeKeyword = $"record {typeKeyword}";
        }
        sb.WriteLine($"public partial {typeKeyword} {typeToGenerate.Name} : ISerializable<{typeToGenerate.Name}>");
    }

    internal static void GenerateConstructor(IndentedStringBuilder sb, TypeToGenerate typeToGenerate, Models.ConstructorInfo ctor)
    {
        var ctorBuilder = new System.Text.StringBuilder();
        ctorBuilder.Append($"private {typeToGenerate.Name}(");

        bool first = true;
        foreach (var p in ctor.Parameters)
        {
            if (!first)
            {
                ctorBuilder.Append(", ");
            }
            ctorBuilder.Append(p.TypeName);
            ctorBuilder.Append(' ');
            ctorBuilder.Append(StringExtensions.ToCamelCase(p.Name));
            first = false;
        }

        ctorBuilder.Append(')');
        sb.WriteLine(ctorBuilder.ToString());

        using (sb.BeginBlock())
        {
            foreach (var parameter in ctor.Parameters)
            {
                sb.WriteLine($"this.{parameter.Name} = {StringExtensions.ToCamelCase(parameter.Name)};");
            }
        }
    }

    internal static void GenerateParameterlessConstructor(IndentedStringBuilder sb, TypeToGenerate typeToGenerate)
    {
        if (typeToGenerate.IsValueType) return;

        sb.WriteLine($"public {typeToGenerate.Name}()");
        using (sb.BeginBlock())
        {
            foreach (var member in typeToGenerate.Members)
            {
                if (member.IsReadOnly) continue;

                sb.WriteLine($"this.{member.Name} = default;");
            }
        }
    }

    private static bool HasInvalidCollection(SourceProductionContext context, TypeToGenerate typeToGenerate)
    {
        bool hasError = false;
        foreach (var member in typeToGenerate.Members)
        {
            if (!member.IsCollection || member.CollectionTypeInfo is null)
            {
                continue;
            }

            var collectionTypeInfo = member.CollectionTypeInfo.Value;
            if (collectionTypeInfo.IsElementUnmanagedType || collectionTypeInfo.IsElementStringType ||
                collectionTypeInfo.HasElementGenerateSerializerAttribute)
            {
                continue;
            }

            var location = Location.Create
            (
                member.Location.FilePath,
                new Microsoft.CodeAnalysis.Text.TextSpan(member.Location.Start, member.Location.End - member.Location.Start),
                new Microsoft.CodeAnalysis.Text.LinePositionSpan
                (
                    new Microsoft.CodeAnalysis.Text.LinePosition(member.Location.Start, 0),
                    new Microsoft.CodeAnalysis.Text.LinePosition(member.Location.End, 0)
                )
            );

            context.ReportDiagnostic(Diagnostic.Create(s_invalidCollectionTypeArgument, location,
                collectionTypeInfo.ElementTypeName, member.Name));

            hasError = true;
        }

        return hasError;
    }

    private static void AddHelpers(IncrementalGeneratorPostInitializationContext context)
    {
        var assembly = Assembly.GetExecutingAssembly();
        var names = assembly.GetManifestResourceNames();

        foreach (var file in names)
        {
            if (!file.StartsWith("FourSer.Gen.Resources.Code."))
            {
                continue;
            }

            using var stream = assembly.GetManifestResourceStream(file);
            if (stream is null) continue;

            using var reader = new StreamReader(stream);
            var source = reader.ReadToEnd();
            context.AddSource(file, source);
        }
    }
}