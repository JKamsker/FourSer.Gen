using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Serializer.Generator;

[Generator]
public class SerializerGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var classDeclarations = context.SyntaxProvider
            .ForAttributeWithMetadataName(
                "Serializer.Contracts.GenerateSerializerAttribute",
                predicate: (node, _) => node is ClassDeclarationSyntax { AttributeLists.Count: > 0 },
                transform: (context, _) => (ClassDeclarationSyntax)context.TargetNode)
            .Where(static m => m is not null);

        IncrementalValueProvider<(Compilation, ImmutableArray<ClassDeclarationSyntax>)> compilationAndClasses =
            context.CompilationProvider.Combine(classDeclarations.Collect());

        context.RegisterSourceOutput(compilationAndClasses,
            static (spc, source) => Execute(source.Item1, source.Item2, spc));
    }

    private static void Execute(Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes, SourceProductionContext context)
    {
        if (classes.IsDefaultOrEmpty)
        {
            return;
        }

        IEnumerable<ClassDeclarationSyntax> distinctClasses = classes.Distinct();

        foreach (var classDeclaration in distinctClasses)
        {
            var semanticModel = compilation.GetSemanticModel(classDeclaration.SyntaxTree);
            var classSymbol = semanticModel.GetDeclaredSymbol(classDeclaration);

            if (classSymbol is null)
            {
                continue;
            }

            var members = ((INamedTypeSymbol)classSymbol).GetMembers()
                .Where(m => m.Kind == SymbolKind.Property)
                .Cast<IPropertySymbol>()
                .ToList();

            var classToGenerate = new ClassToGenerate(classSymbol.Name, classSymbol.ContainingNamespace.ToDisplayString(), members);

            var source = GenerateSource(classToGenerate);
            context.AddSource($"{classToGenerate.Name}.g.cs", source);
        }
    }

    private static string GenerateSource(ClassToGenerate classToGenerate)
    {
        var sb = new StringBuilder();
        sb.AppendLine($"// <auto-generated/>");
        sb.AppendLine($"using System;");
        sb.AppendLine($"using Serializer.Contracts;");
        sb.AppendLine();
        sb.AppendLine($"namespace {classToGenerate.Namespace};");
        sb.AppendLine();
        sb.AppendLine($"public partial class {classToGenerate.Name} : ISerializable<{classToGenerate.Name}>");
        sb.AppendLine("{");
        sb.AppendLine($"    public static int GetPacketSize({classToGenerate.Name} obj)");
        sb.AppendLine("    {");
        sb.AppendLine("        var size = 0;");
        foreach (var member in classToGenerate.Members)
        {
            var attribute = member.GetAttributes().FirstOrDefault(a => a.AttributeClass.Name == "GenerateSerializerAttribute");
            if (attribute is not null)
            {
                var countType = attribute.NamedArguments.FirstOrDefault(arg => arg.Key == "CountType").Value;
                var countSize = attribute.NamedArguments.FirstOrDefault(arg => arg.Key == "CountSize").Value;

                if (countType.IsNull == false)
                {
                    sb.AppendLine($"        size += sizeof({((INamedTypeSymbol)countType.Value).ToDisplayString()});");
                }
                else if (countSize.IsNull == false)
                {
                    sb.AppendLine($"        size += {countSize.Value};");
                }

                sb.AppendLine($"        size += obj.{member.Name}.Count * sizeof({((INamedTypeSymbol)member.Type).TypeArguments[0].ToDisplayString()});");
            }
            else if (member.Type.SpecialType == SpecialType.System_String)
            {
                sb.AppendLine($"        size += sizeof(int);");
                sb.AppendLine($"        size += System.Text.Encoding.UTF8.GetByteCount(obj.{member.Name});");
            }
            else
            {
                sb.AppendLine($"        size += sizeof({member.Type.ToDisplayString()});");
            }
        }
        sb.AppendLine("        return size;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    public static {classToGenerate.Name} Deserialize(ReadOnlySpan<byte> data)");
        sb.AppendLine("    {");
        sb.AppendLine($"        var obj = new {classToGenerate.Name}();");
        foreach (var member in classToGenerate.Members)
        {
            var attribute = member.GetAttributes().FirstOrDefault(a => a.AttributeClass.Name == "GenerateSerializerAttribute");
            if (attribute is not null)
            {
                var countType = attribute.NamedArguments.FirstOrDefault(arg => arg.Key == "CountType").Value;
                var countSize = attribute.NamedArguments.FirstOrDefault(arg => arg.Key == "CountSize").Value;
                var countSizeReference = attribute.NamedArguments.FirstOrDefault(arg => arg.Key == "CountSizeReference").Value;

                if (countType.IsNull == false)
                {
                    sb.AppendLine($"        var {member.Name}Count = data.Read{((INamedTypeSymbol)countType.Value).ToDisplayString().Replace("System.", "")}();");
                    sb.AppendLine($"        obj.{member.Name} = new();");
                    sb.AppendLine($"        for(int i = 0; i < {member.Name}Count; i++)");
                    sb.AppendLine("        {");
                    sb.AppendLine($"            obj.{member.Name}.Add(data.Read{((INamedTypeSymbol)((INamedTypeSymbol)member.Type).TypeArguments[0]).Name}());");
                    sb.AppendLine("        }");
                }
                else if (countSize.IsNull == false)
                {
                    sb.AppendLine($"        var {member.Name}Count = {countSize.Value};");
                    sb.AppendLine($"        obj.{member.Name} = new();");
                    sb.AppendLine($"        for(int i = 0; i < {member.Name}Count; i++)");
                    sb.AppendLine("        {");
                    sb.AppendLine($"            obj.{member.Name}.Add(data.Read{((INamedTypeSymbol)((INamedTypeSymbol)member.Type).TypeArguments[0]).Name}());");
                    sb.AppendLine("        }");
                }
                else if (countSizeReference.IsNull == false)
                {
                    sb.AppendLine($"        var {member.Name}Count = obj.{countSizeReference.Value};");
                    sb.AppendLine($"        obj.{member.Name} = new();");
                    sb.AppendLine($"        for(int i = 0; i < {member.Name}Count; i++)");
                    sb.AppendLine("        {");
                    sb.AppendLine($"            obj.{member.Name}.Add(data.Read{((INamedTypeSymbol)((INamedTypeSymbol)member.Type).TypeArguments[0]).Name}());");
                    sb.AppendLine("        }");
                }
            }
            else if (member.Type.SpecialType == SpecialType.System_String)
            {
                sb.AppendLine($"        obj.{member.Name} = data.ReadString();");
            }
            else
            {
                sb.AppendLine($"        obj.{member.Name} = data.Read{member.Type.Name}();");
            }
        }
        sb.AppendLine("        return obj;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine($"    public static void Serialize({classToGenerate.Name} obj, Span<byte> data)");
        sb.AppendLine("    {");
        foreach (var member in classToGenerate.Members)
        {
            var attribute = member.GetAttributes().FirstOrDefault(a => a.AttributeClass.Name == "GenerateSerializerAttribute");
            if (attribute is not null)
            {
                var countType = attribute.NamedArguments.FirstOrDefault(arg => arg.Key == "CountType").Value;
                var countSize = attribute.NamedArguments.FirstOrDefault(arg => arg.Key == "CountSize").Value;

                if (countType.IsNull == false)
                {
                    sb.AppendLine($"        data.Write{((INamedTypeSymbol)countType.Value).ToDisplayString().Replace("System.", "")}((ushort)obj.{member.Name}.Count);");
                }
                else if (countSize.IsNull == false)
                {
                    // No need to write count
                }

                sb.AppendLine($"        foreach(var item in obj.{member.Name})");
                sb.AppendLine("        {");
                sb.AppendLine($"            data.Write{((INamedTypeSymbol)((INamedTypeSymbol)member.Type).TypeArguments[0]).Name}(item);");
                sb.AppendLine("        }");
            }
            else if (member.Type.SpecialType == SpecialType.System_String)
            {
                sb.AppendLine($"        data.WriteString(obj.{member.Name});");
            }
            else
            {
                sb.AppendLine($"        data.Write{member.Type.Name}(obj.{member.Name});");
            }
        }
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }
}