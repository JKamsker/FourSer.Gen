using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Serializer.Generator.CodeGenerators;

namespace Serializer.Generator;

/// <summary>
/// Handles the generation of complete source files for serializable types
/// </summary>
public static class SourceGenerator
{
    public static string GenerateSource(ClassToGenerate classToGenerate, INamedTypeSymbol namedTypeSymbol, List<INamedTypeSymbol>? nestedTypes = null)
    {
        var sb = new StringBuilder();
        
        GenerateFileHeader(sb, classToGenerate);
        GenerateClassDeclaration(sb, classToGenerate);
        
        PacketSizeGenerator.GenerateGetPacketSize(sb, classToGenerate, namedTypeSymbol);
        sb.AppendLine();
        
        DeserializationGenerator.GenerateDeserialize(sb, classToGenerate, namedTypeSymbol);
        sb.AppendLine();
        
        SerializationGenerator.GenerateSerialize(sb, classToGenerate, namedTypeSymbol);

        if (nestedTypes != null)
        {
            NestedTypeGenerator.GenerateNestedTypes(sb, namedTypeSymbol, nestedTypes);
        }

        sb.AppendLine("}");
        return sb.ToString();
    }

    private static void GenerateFileHeader(StringBuilder sb, ClassToGenerate classToGenerate)
    {
        sb.AppendLine($"// <auto-generated/>");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Buffers.Binary;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Runtime.CompilerServices;");
        sb.AppendLine("using System.Text;");
        sb.AppendLine("using Serializer.Contracts;");
        // sb.AppendLine("using Serializer.Consumer.Extensions;");
        sb.AppendLine($"using System.IO;");
        // sb.AppendLine($"using System.Runtime.CompilerServices;");
        // sb.AppendLine($"using Serializer.Contracts;");
        sb.AppendLine($"using Serializer.Generator.Helpers;");
        sb.AppendLine();
        sb.AppendLine($"namespace {classToGenerate.Namespace};");
        sb.AppendLine();
    }

    private static void GenerateClassDeclaration(StringBuilder sb, ClassToGenerate classToGenerate)
    {
        var typeKeyword = classToGenerate.IsValueType ? "struct" : "class";
        sb.AppendLine($"public partial {typeKeyword} {classToGenerate.Name} : ISerializable<{classToGenerate.Name}>");
        sb.AppendLine("{");
    }
}