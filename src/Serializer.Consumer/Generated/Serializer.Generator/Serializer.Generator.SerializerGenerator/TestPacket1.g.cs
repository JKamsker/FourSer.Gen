// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class TestPacket1 : ISerializable<TestPacket1>
{
    public static int GetPacketSize(TestPacket1 obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type A
        size += sizeof(int); // Size for string length
        size += System.Text.Encoding.UTF8.GetByteCount(obj.B);
        size += sizeof(int); // Default count size for C
        size += obj.C.Count * sizeof(int);
        return size;
    }

    public static TestPacket1 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new TestPacket1();
        obj.A = data.ReadInt32();
        obj.B = data.ReadString();
        var CCount = 0;
        CCount = data.ReadInt32();
        obj.C = new System.Collections.Generic.List<int>(CCount);
        for (int i = 0; i < CCount; i++)
        {
            obj.C.Add(data.ReadInt32());
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(TestPacket1 obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.A);
        data.WriteString(obj.B);
        data.WriteInt32(obj.C.Count);
        for (int i = 0; i < obj.C.Count; i++)
        {
            data.WriteInt32(obj.C[i]);
        }
        return originalData.Length - data.Length;
    }
}
