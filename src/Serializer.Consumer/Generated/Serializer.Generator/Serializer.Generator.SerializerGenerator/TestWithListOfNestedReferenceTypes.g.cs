// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class TestWithListOfNestedReferenceTypes : ISerializable<TestWithListOfNestedReferenceTypes>
{
    public static int GetPacketSize(TestWithListOfNestedReferenceTypes obj)
    {
        var size = 0;
        size += sizeof(int); // Default count size for MyList
        foreach(var item in obj.MyList)
        {
            size += TestWithListOfNestedReferenceTypes.NestedEntity.GetPacketSize(item);
        }
        return size;
    }

    public static TestWithListOfNestedReferenceTypes Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new TestWithListOfNestedReferenceTypes();
        var MyListCount = 0;
        MyListCount = data.ReadInt32();
        obj.MyList = new System.Collections.Generic.List<Serializer.Consumer.UseCases.TestWithListOfNestedReferenceTypes.NestedEntity>(MyListCount);
        for (int i = 0; i < MyListCount; i++)
        {
            obj.MyList.Add(TestWithListOfNestedReferenceTypes.NestedEntity.Deserialize(data, out var itemBytesRead));
            data = data.Slice(itemBytesRead);
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(TestWithListOfNestedReferenceTypes obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.MyList.Count);
        for (int i = 0; i < obj.MyList.Count; i++)
        {
            var bytesWritten = NestedEntity.Serialize(obj.MyList[i], data);
            data = data.Slice(bytesWritten);
        }
        return originalData.Length - data.Length;
    }
}
