// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class MixedFieldsAndPropsPacket : ISerializable<MixedFieldsAndPropsPacket>
{
    public static int GetPacketSize(MixedFieldsAndPropsPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type PropertyInt
        size += StringEx.MeasureSize(obj.PropertyString); // Size for string PropertyString
        size += sizeof(int); // Size for unmanaged type FieldInt
        size += StringEx.MeasureSize(obj.FieldString); // Size for string FieldString
        size += sizeof(float); // Size for unmanaged type FieldFloat
        return size;
    }

    public static MixedFieldsAndPropsPacket Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new MixedFieldsAndPropsPacket();
        obj.PropertyInt = data.ReadInt32();
        obj.PropertyString = data.ReadString();
        obj.FieldInt = data.ReadInt32();
        obj.FieldString = data.ReadString();
        obj.FieldFloat = data.ReadSingle();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(MixedFieldsAndPropsPacket obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.PropertyInt);
        data.WriteString(obj.PropertyString);
        data.WriteInt32(obj.FieldInt);
        data.WriteString(obj.FieldString);
        data.WriteSingle(obj.FieldFloat);
        return originalData.Length - data.Length;
    }
}
