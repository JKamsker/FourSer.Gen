// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class PolymorphicEntityImplicitTypeId : ISerializable<PolymorphicEntityImplicitTypeId>
{
    public static int GetPacketSize(PolymorphicEntityImplicitTypeId obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        // Polymorphic size calculation for Entity - infer type from actual object
        size += sizeof(int); // TypeId for polymorphic Entity
        if (obj.Entity is EntityType1 entityEntityType1)
        {
            size += EntityType1.GetPacketSize(entityEntityType1);
        }
        else if (obj.Entity is EntityType2 entityEntityType2)
        {
            size += EntityType2.GetPacketSize(entityEntityType2);
        }
        else
        {
            throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        return size;
    }

    public static PolymorphicEntityImplicitTypeId Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new PolymorphicEntityImplicitTypeId();
        obj.Id = data.ReadInt32();
        // Polymorphic deserialization for Entity
        var EntityTypeId = data.ReadInt32();
        switch (EntityTypeId)
        {
            case 1:
                obj.Entity = EntityType1.Deserialize(data, out var EntityBytesRead1);
                data = data.Slice(EntityBytesRead1);
                break;
            case 2:
                obj.Entity = EntityType2.Deserialize(data, out var EntityBytesRead2);
                data = data.Slice(EntityBytesRead2);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(PolymorphicEntityImplicitTypeId obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.Id);
        // Polymorphic serialization for Entity
        var EntityTypeId = 0;
        if (obj.Entity is EntityType1)
        {
            EntityTypeId = 1;
        }
        else if (obj.Entity is EntityType2)
        {
            EntityTypeId = 2;
        }
        else
        {
            throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        data.WriteInt32(EntityTypeId);
        switch (EntityTypeId)
        {
            case 1:
                var EntityBytesWritten1 = EntityType1.Serialize((EntityType1)obj.Entity, data);
                data = data.Slice(EntityBytesWritten1);
                break;
            case 2:
                var EntityBytesWritten2 = EntityType2.Serialize((EntityType2)obj.Entity, data);
                data = data.Slice(EntityBytesWritten2);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        return originalData.Length - data.Length;
    }

    public partial class BaseEntity : ISerializable<BaseEntity>
    {
        public static int GetPacketSize(BaseEntity obj)
        {
            var size = 0;
            return size;
        }

        public static BaseEntity Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new BaseEntity();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(BaseEntity obj, Span<byte> data)
        {
            var originalData = data;
            return originalData.Length - data.Length;
        }
    }

    public partial class EntityType1 : ISerializable<EntityType1>
    {
        public static int GetPacketSize(EntityType1 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Name);
            return size;
        }

        public static EntityType1 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new EntityType1();
            obj.Name = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(EntityType1 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Name);
            return originalData.Length - data.Length;
        }
    }

    public partial class EntityType2 : ISerializable<EntityType2>
    {
        public static int GetPacketSize(EntityType2 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Description);
            return size;
        }

        public static EntityType2 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new EntityType2();
            obj.Description = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(EntityType2 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Description);
            return originalData.Length - data.Length;
        }
    }
}
