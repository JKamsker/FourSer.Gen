// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class PolymorphicWithEnumTypeId : ISerializable<PolymorphicWithEnumTypeId>
{
    public static int GetPacketSize(PolymorphicWithEnumTypeId obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        // Polymorphic size calculation for Entity - infer type from actual object
        size += sizeof(byte); // TypeId for polymorphic Entity
        if (obj.Entity is EnumEntityType1 entityEnumEntityType1)
        {
            size += EnumEntityType1.GetPacketSize(entityEnumEntityType1);
        }
        else if (obj.Entity is EnumEntityType2 entityEnumEntityType2)
        {
            size += EnumEntityType2.GetPacketSize(entityEnumEntityType2);
        }
        else
        {
            throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        return size;
    }

    public static PolymorphicWithEnumTypeId Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new PolymorphicWithEnumTypeId();
        obj.Id = data.ReadInt32();
        // Polymorphic deserialization for Entity
        var EntityTypeId = (Serializer.Consumer.UseCases.EntityTypeEnum)data.ReadByte();
        switch (EntityTypeId)
        {
            case (Serializer.Consumer.UseCases.EntityTypeEnum)10:
                obj.Entity = EnumEntityType1.Deserialize(data, out var EntityBytesRead10);
                data = data.Slice(EntityBytesRead10);
                break;
            case (Serializer.Consumer.UseCases.EntityTypeEnum)20:
                obj.Entity = EnumEntityType2.Deserialize(data, out var EntityBytesRead20);
                data = data.Slice(EntityBytesRead20);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(PolymorphicWithEnumTypeId obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.Id);
        // Polymorphic serialization for Entity
        var EntityTypeId = default(Serializer.Consumer.UseCases.EntityTypeEnum);
        if (obj.Entity is EnumEntityType1)
        {
            EntityTypeId = (Serializer.Consumer.UseCases.EntityTypeEnum)10;
        }
        else if (obj.Entity is EnumEntityType2)
        {
            EntityTypeId = (Serializer.Consumer.UseCases.EntityTypeEnum)20;
        }
        else
        {
            throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        data.WriteByte((Byte)EntityTypeId);
        switch (EntityTypeId)
        {
            case (Serializer.Consumer.UseCases.EntityTypeEnum)10:
                var EntityBytesWritten10 = EnumEntityType1.Serialize((EnumEntityType1)obj.Entity, data);
                data = data.Slice(EntityBytesWritten10);
                break;
            case (Serializer.Consumer.UseCases.EntityTypeEnum)20:
                var EntityBytesWritten20 = EnumEntityType2.Serialize((EnumEntityType2)obj.Entity, data);
                data = data.Slice(EntityBytesWritten20);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        return originalData.Length - data.Length;
    }

    public partial class BaseEnumEntity : ISerializable<BaseEnumEntity>
    {
        public static int GetPacketSize(BaseEnumEntity obj)
        {
            var size = 0;
            return size;
        }

        public static BaseEnumEntity Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new BaseEnumEntity();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(BaseEnumEntity obj, Span<byte> data)
        {
            var originalData = data;
            return originalData.Length - data.Length;
        }
    }

    public partial class EnumEntityType1 : ISerializable<EnumEntityType1>
    {
        public static int GetPacketSize(EnumEntityType1 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Name);
            return size;
        }

        public static EnumEntityType1 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new EnumEntityType1();
            obj.Name = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(EnumEntityType1 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Name);
            return originalData.Length - data.Length;
        }
    }

    public partial class EnumEntityType2 : ISerializable<EnumEntityType2>
    {
        public static int GetPacketSize(EnumEntityType2 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Description);
            return size;
        }

        public static EnumEntityType2 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new EnumEntityType2();
            obj.Description = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(EnumEntityType2 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Description);
            return originalData.Length - data.Length;
        }
    }
}
