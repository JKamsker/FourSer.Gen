// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class CXEntity : ISerializable<CXEntity>
{
    public static int GetPacketSize(CXEntity obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += sizeof(int); // Size for string length
        size += System.Text.Encoding.UTF8.GetByteCount(obj.Name);
        return size;
    }

    public static CXEntity Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new CXEntity();
        obj.Id = data.ReadInt32();
        obj.Name = data.ReadString();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(CXEntity obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.Id);
        data.WriteString(obj.Name);
        return originalData.Length - data.Length;
    }
}
