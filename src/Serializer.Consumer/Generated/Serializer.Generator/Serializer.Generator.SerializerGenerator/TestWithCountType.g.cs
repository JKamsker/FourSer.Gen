// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class TestWithCountType : ISerializable<TestWithCountType>
{
    public static int GetPacketSize(TestWithCountType obj)
    {
        var size = 0;
        size += sizeof(ushort); // Count size for MyList
        size += obj.MyList.Count * sizeof(int);
        return size;
    }

    public static TestWithCountType Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new TestWithCountType();
        var MyListCount = 0;
        MyListCount = data.ReadUInt16();
        obj.MyList = new System.Collections.Generic.List<int>(MyListCount);
        for (int i = 0; i < MyListCount; i++)
        {
            obj.MyList.Add(data.ReadInt32());
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(TestWithCountType obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteUInt16((ushort)obj.MyList.Count);
        for (int i = 0; i < obj.MyList.Count; i++)
        {
            data.WriteInt32(obj.MyList[i]);
        }
        return originalData.Length - data.Length;
    }
}
