// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class LoginAckPacket : ISerializable<LoginAckPacket>
{
    public static int GetPacketSize(LoginAckPacket obj)
    {
        var size = 0;
        size += sizeof(byte); // Size for unmanaged type bResult
        size += sizeof(uint); // Size for unmanaged type dwUserID
        size += sizeof(uint); // Size for unmanaged type dwKickID
        size += sizeof(uint); // Size for unmanaged type dwKEY
        size += sizeof(uint); // Size for unmanaged type Address
        size += sizeof(ushort); // Size for unmanaged type Port
        size += sizeof(byte); // Size for unmanaged type bCreateCardCnt
        size += sizeof(byte); // Size for unmanaged type bInPcRoom
        size += sizeof(uint); // Size for unmanaged type dwPremiumPcRoom
        size += sizeof(long); // Size for unmanaged type dCurrentTime
        size += sizeof(long); // Size for unmanaged type dKey
        return size;
    }

    public static LoginAckPacket Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new LoginAckPacket();
        obj.bResult = data.ReadByte();
        obj.dwUserID = data.ReadUInt32();
        obj.dwKickID = data.ReadUInt32();
        obj.dwKEY = data.ReadUInt32();
        obj.Address = data.ReadUInt32();
        obj.Port = data.ReadUInt16();
        obj.bCreateCardCnt = data.ReadByte();
        obj.bInPcRoom = data.ReadByte();
        obj.dwPremiumPcRoom = data.ReadUInt32();
        obj.dCurrentTime = data.ReadInt64();
        obj.dKey = data.ReadInt64();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(LoginAckPacket obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteByte(obj.bResult);
        data.WriteUInt32(obj.dwUserID);
        data.WriteUInt32(obj.dwKickID);
        data.WriteUInt32(obj.dwKEY);
        data.WriteUInt32(obj.Address);
        data.WriteUInt16(obj.Port);
        data.WriteByte(obj.bCreateCardCnt);
        data.WriteByte(obj.bInPcRoom);
        data.WriteUInt32(obj.dwPremiumPcRoom);
        data.WriteInt64(obj.dCurrentTime);
        data.WriteInt64(obj.dKey);
        return originalData.Length - data.Length;
    }
}
