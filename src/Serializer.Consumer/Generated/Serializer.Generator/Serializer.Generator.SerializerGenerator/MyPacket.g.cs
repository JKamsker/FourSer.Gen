// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class MyPacket : ISerializable<MyPacket>
{
    public static int GetPacketSize(MyPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Default count size for Data
        size += obj.Data.Count * sizeof(byte);
        return size;
    }

    public static MyPacket Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new MyPacket();
        var DataCount = 0;
        DataCount = data.ReadInt32();
        obj.Data = new System.Collections.Generic.List<byte>(DataCount);
        for (int i = 0; i < DataCount; i++)
        {
            obj.Data.Add(data.ReadByte());
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(MyPacket obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.Data.Count);
        for (int i = 0; i < obj.Data.Count; i++)
        {
            data.WriteByte(obj.Data[i]);
        }
        return originalData.Length - data.Length;
    }
}
