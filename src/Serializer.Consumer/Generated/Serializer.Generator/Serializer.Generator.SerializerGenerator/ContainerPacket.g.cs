// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class ContainerPacket : ISerializable<ContainerPacket>
{
    public static int GetPacketSize(ContainerPacket obj)
    {
        var size = 0;
        size += NestedPacket.GetPacketSize(obj.Nested);
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    public static ContainerPacket Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new ContainerPacket();
        obj.Nested = NestedPacket.Deserialize(data, out var nestedBytesRead);
        data = data.Slice(nestedBytesRead);
        obj.Name = data.ReadString();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(ContainerPacket obj, Span<byte> data)
    {
        var originalData = data;
        var bytesWritten = NestedPacket.Serialize(obj.Nested, data);
        data = data.Slice(bytesWritten);
        data.WriteString(obj.Name);
        return originalData.Length - data.Length;
    }
}
