// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class PolymorphicWithUShortTypeId : ISerializable<PolymorphicWithUShortTypeId>
{
    public static int GetPacketSize(PolymorphicWithUShortTypeId obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        // Polymorphic size calculation for Entity - infer type from actual object
        size += sizeof(ushort); // TypeId for polymorphic Entity
        if (obj.Entity is UShortEntityType1 entityUShortEntityType1)
        {
            size += UShortEntityType1.GetPacketSize(entityUShortEntityType1);
        }
        else if (obj.Entity is UShortEntityType2 entityUShortEntityType2)
        {
            size += UShortEntityType2.GetPacketSize(entityUShortEntityType2);
        }
        else
        {
            throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        return size;
    }

    public static PolymorphicWithUShortTypeId Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new PolymorphicWithUShortTypeId();
        obj.Id = data.ReadInt32();
        // Polymorphic deserialization for Entity
        var EntityTypeId = data.ReadUInt16();
        switch (EntityTypeId)
        {
            case 1000:
                obj.Entity = UShortEntityType1.Deserialize(data, out var EntityBytesRead1000);
                data = data.Slice(EntityBytesRead1000);
                break;
            case 2000:
                obj.Entity = UShortEntityType2.Deserialize(data, out var EntityBytesRead2000);
                data = data.Slice(EntityBytesRead2000);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(PolymorphicWithUShortTypeId obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.Id);
        // Polymorphic serialization for Entity
        var EntityTypeId = (ushort)0;
        if (obj.Entity is UShortEntityType1)
        {
            EntityTypeId = (ushort)1000;
        }
        else if (obj.Entity is UShortEntityType2)
        {
            EntityTypeId = (ushort)2000;
        }
        else
        {
            throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        data.WriteUInt16(EntityTypeId);
        switch (EntityTypeId)
        {
            case 1000:
                var EntityBytesWritten1000 = UShortEntityType1.Serialize((UShortEntityType1)obj.Entity, data);
                data = data.Slice(EntityBytesWritten1000);
                break;
            case 2000:
                var EntityBytesWritten2000 = UShortEntityType2.Serialize((UShortEntityType2)obj.Entity, data);
                data = data.Slice(EntityBytesWritten2000);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        return originalData.Length - data.Length;
    }

    public partial class BaseUShortEntity : ISerializable<BaseUShortEntity>
    {
        public static int GetPacketSize(BaseUShortEntity obj)
        {
            var size = 0;
            return size;
        }

        public static BaseUShortEntity Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new BaseUShortEntity();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(BaseUShortEntity obj, Span<byte> data)
        {
            var originalData = data;
            return originalData.Length - data.Length;
        }
    }

    public partial class UShortEntityType1 : ISerializable<UShortEntityType1>
    {
        public static int GetPacketSize(UShortEntityType1 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Name);
            return size;
        }

        public static UShortEntityType1 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new UShortEntityType1();
            obj.Name = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(UShortEntityType1 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Name);
            return originalData.Length - data.Length;
        }
    }

    public partial class UShortEntityType2 : ISerializable<UShortEntityType2>
    {
        public static int GetPacketSize(UShortEntityType2 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Description);
            return size;
        }

        public static UShortEntityType2 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new UShortEntityType2();
            obj.Description = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(UShortEntityType2 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Description);
            return originalData.Length - data.Length;
        }
    }
}
