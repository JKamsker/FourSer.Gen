// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class AutoPolymorphicEntity : ISerializable<AutoPolymorphicEntity>
{
    public static int GetPacketSize(AutoPolymorphicEntity obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        // Polymorphic size calculation for Entity - infer type from actual object
        size += sizeof(int); // TypeId for polymorphic Entity
        switch (obj.Entity.GetType().Name)
        {
            case "AutoEntityType1":
                size += AutoEntityType1.GetPacketSize((AutoEntityType1)obj.Entity);
                break;
            case "AutoEntityType2":
                size += AutoEntityType2.GetPacketSize((AutoEntityType2)obj.Entity);
                break;
            default:
                throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        return size;
    }

    public static AutoPolymorphicEntity Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new AutoPolymorphicEntity();
        obj.Id = data.ReadInt32();
        // Polymorphic deserialization for Entity
        var EntityTypeId = data.ReadInt32();
        switch (EntityTypeId)
        {
            case 1:
                obj.Entity = AutoEntityType1.Deserialize(data, out var EntityBytesRead1);
                data = data.Slice(EntityBytesRead1);
                break;
            case 2:
                obj.Entity = AutoEntityType2.Deserialize(data, out var EntityBytesRead2);
                data = data.Slice(EntityBytesRead2);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(AutoPolymorphicEntity obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.Id);
        // Polymorphic serialization for Entity
        var EntityTypeId = 0;
        var actualTypeEntity = obj.Entity.GetType().Name;
        switch (actualTypeEntity)
        {
            case "AutoEntityType1":
                EntityTypeId = 1;
                break;
            case "AutoEntityType2":
                EntityTypeId = 2;
                break;
            default:
                throw new InvalidOperationException($"Unknown polymorphic type: {actualTypeEntity}");
        }
        data.WriteInt32(EntityTypeId);
        switch (EntityTypeId)
        {
            case 1:
                var EntityBytesWritten1 = AutoEntityType1.Serialize((AutoEntityType1)obj.Entity, data);
                data = data.Slice(EntityBytesWritten1);
                break;
            case 2:
                var EntityBytesWritten2 = AutoEntityType2.Serialize((AutoEntityType2)obj.Entity, data);
                data = data.Slice(EntityBytesWritten2);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        return originalData.Length - data.Length;
    }

    public partial class BaseAutoEntity : ISerializable<BaseAutoEntity>
    {
        public static int GetPacketSize(BaseAutoEntity obj)
        {
            var size = 0;
            return size;
        }

        public static BaseAutoEntity Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new BaseAutoEntity();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(BaseAutoEntity obj, Span<byte> data)
        {
            var originalData = data;
            return originalData.Length - data.Length;
        }
    }

    public partial class AutoEntityType1 : ISerializable<AutoEntityType1>
    {
        public static int GetPacketSize(AutoEntityType1 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Name);
            return size;
        }

        public static AutoEntityType1 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new AutoEntityType1();
            obj.Name = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(AutoEntityType1 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Name);
            return originalData.Length - data.Length;
        }
    }

    public partial class AutoEntityType2 : ISerializable<AutoEntityType2>
    {
        public static int GetPacketSize(AutoEntityType2 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Description);
            return size;
        }

        public static AutoEntityType2 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new AutoEntityType2();
            obj.Description = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(AutoEntityType2 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Description);
            return originalData.Length - data.Length;
        }
    }
}
