// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using Serializer.Contracts;
using FourServerProxy.HighPerformance.Extensions;

namespace Serializer.Consumer.UseCases;

public partial class PolymorphicWithLongTypeId : ISerializable<PolymorphicWithLongTypeId>
{
    public static int GetPacketSize(PolymorphicWithLongTypeId obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        // Polymorphic size calculation for Entity - infer type from actual object
        size += sizeof(long); // TypeId for polymorphic Entity
        if (obj.Entity is LongEntityType1 entityLongEntityType1)
        {
            size += LongEntityType1.GetPacketSize(entityLongEntityType1);
        }
        else if (obj.Entity is LongEntityType2 entityLongEntityType2)
        {
            size += LongEntityType2.GetPacketSize(entityLongEntityType2);
        }
        else
        {
            throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        return size;
    }

    public static PolymorphicWithLongTypeId Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new PolymorphicWithLongTypeId();
        obj.Id = data.ReadInt32();
        // Polymorphic deserialization for Entity
        var EntityTypeId = data.ReadInt64();
        switch (EntityTypeId)
        {
            case 1000000:
                obj.Entity = LongEntityType1.Deserialize(data, out var EntityBytesRead1000000);
                data = data.Slice(EntityBytesRead1000000);
                break;
            case 2000000:
                obj.Entity = LongEntityType2.Deserialize(data, out var EntityBytesRead2000000);
                data = data.Slice(EntityBytesRead2000000);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(PolymorphicWithLongTypeId obj, Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32(obj.Id);
        // Polymorphic serialization for Entity
        var EntityTypeId = 0L;
        if (obj.Entity is LongEntityType1)
        {
            EntityTypeId = 1000000L;
        }
        else if (obj.Entity is LongEntityType2)
        {
            EntityTypeId = 2000000L;
        }
        else
        {
            throw new InvalidOperationException($"Unknown polymorphic type: {obj.Entity.GetType().Name}");
        }
        data.WriteInt64(EntityTypeId);
        switch (EntityTypeId)
        {
            case 1000000:
                var EntityBytesWritten1000000 = LongEntityType1.Serialize((LongEntityType1)obj.Entity, data);
                data = data.Slice(EntityBytesWritten1000000);
                break;
            case 2000000:
                var EntityBytesWritten2000000 = LongEntityType2.Serialize((LongEntityType2)obj.Entity, data);
                data = data.Slice(EntityBytesWritten2000000);
                break;
            default:
                throw new InvalidOperationException($"Unknown type ID: {EntityTypeId}");
        }
        return originalData.Length - data.Length;
    }

    public partial class BaseLongEntity : ISerializable<BaseLongEntity>
    {
        public static int GetPacketSize(BaseLongEntity obj)
        {
            var size = 0;
            return size;
        }

        public static BaseLongEntity Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new BaseLongEntity();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(BaseLongEntity obj, Span<byte> data)
        {
            var originalData = data;
            return originalData.Length - data.Length;
        }
    }

    public partial class LongEntityType1 : ISerializable<LongEntityType1>
    {
        public static int GetPacketSize(LongEntityType1 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Name);
            return size;
        }

        public static LongEntityType1 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new LongEntityType1();
            obj.Name = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(LongEntityType1 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Name);
            return originalData.Length - data.Length;
        }
    }

    public partial class LongEntityType2 : ISerializable<LongEntityType2>
    {
        public static int GetPacketSize(LongEntityType2 obj)
        {
            var size = 0;
            size += sizeof(int); // Size for string length
            size += System.Text.Encoding.UTF8.GetByteCount(obj.Description);
            return size;
        }

        public static LongEntityType2 Deserialize(ReadOnlySpan<byte> data, out int bytesRead)
        {
            bytesRead = 0;
            var originalData = data;
            var obj = new LongEntityType2();
            obj.Description = data.ReadString();
            bytesRead = originalData.Length - data.Length;
            return obj;
        }

        public static int Serialize(LongEntityType2 obj, Span<byte> data)
        {
            var originalData = data;
            data.WriteString(obj.Description);
            return originalData.Length - data.Length;
        }
    }
}
