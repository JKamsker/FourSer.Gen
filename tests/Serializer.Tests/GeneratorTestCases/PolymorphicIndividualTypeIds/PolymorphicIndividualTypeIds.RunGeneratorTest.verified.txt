// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace Serializer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class PolymorphicIndividualTest : ISerializable<PolymorphicIndividualTest>
{
    public static int GetPacketSize(PolymorphicIndividualTest obj)
    {
        var size = 0;
        size += sizeof(byte); // Count size for Animals
        foreach(var item in obj.Animals)
        {
            size += sizeof(byte);
        switch (item)
        {
            case Cat typedInstance:
                size += Cat.GetPacketSize(typedInstance);
                break;
            case Dog typedInstance:
                size += Dog.GetPacketSize(typedInstance);
                break;
            case null: break;
            default:
                throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
        }
        }
        return size;
    }

    public static PolymorphicIndividualTest Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new PolymorphicIndividualTest();
        var AnimalsCount = data.ReadByte();
        obj.Animals = new System.Collections.Generic.List<Serializer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal>(AnimalsCount);
        for (int i = 0; i < AnimalsCount; i++)
        {
            Serializer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal item;
            int itemBytesRead;
            var typeId = data.ReadByte();
            switch ((byte)typeId)
            {
                case 1:
                    item = Cat.Deserialize(data, out itemBytesRead);
                    data = data.Slice(itemBytesRead);
                    break;
                case 2:
                    item = Dog.Deserialize(data, out itemBytesRead);
                    data = data.Slice(itemBytesRead);
                    break;
                default:
                    throw new System.IO.InvalidDataException($"Unknown type id for item: {typeId}");
            }
            obj.Animals.Add(item);
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(PolymorphicIndividualTest obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteByte((byte)obj.Animals.Count);
        int AnimalsItemBytesWritten;
        foreach(var item in obj.Animals)
        {
            switch (item)
            {
                case Cat typedInstance:
                    data.WriteByte((byte)1);
                    AnimalsItemBytesWritten = Cat.Serialize(typedInstance, data);
                    data = data.Slice(AnimalsItemBytesWritten);
                    break;
                case Dog typedInstance:
                    data.WriteByte((byte)2);
                    AnimalsItemBytesWritten = Dog.Serialize(typedInstance, data);
                    data = data.Slice(AnimalsItemBytesWritten);
                    break;
                case null:
                    break;
                default:
                    throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
            }
        }
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace Serializer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Cat : ISerializable<Cat>
{
    public static int GetPacketSize(Cat obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    public static new Cat Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Cat();
        obj.Id = data.ReadInt32();
        obj.Name = data.ReadString();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Cat obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((Int32)obj.Id);
        data.WriteString(obj.Name);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace Serializer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Dog : ISerializable<Dog>
{
    public static int GetPacketSize(Dog obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Breed); // Size for string Breed
        return size;
    }

    public static new Dog Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Dog();
        obj.Id = data.ReadInt32();
        obj.Breed = data.ReadString();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Dog obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((Int32)obj.Id);
        data.WriteString(obj.Breed);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace Serializer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Animal : ISerializable<Animal>
{
    public static int GetPacketSize(Animal obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        return size;
    }

    public static Animal Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Animal();
        obj.Id = data.ReadInt32();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Animal obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((Int32)obj.Id);
        return originalData.Length - data.Length;
    }
}
