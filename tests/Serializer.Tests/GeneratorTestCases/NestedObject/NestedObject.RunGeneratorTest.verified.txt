// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace Serializer.Tests.GeneratorTestCases.NestedObject;

public partial class ContainerPacket : ISerializable<ContainerPacket>
{
    public static int GetPacketSize(ContainerPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += NestedData.GetPacketSize(obj.Data); // Size for nested type Data
        return size;
    }

    public static ContainerPacket Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new ContainerPacket();
        obj.Id = data.ReadInt32();
        obj.Data = NestedData.Deserialize(data, out var nestedBytesRead);
        data = data.Slice(nestedBytesRead);
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(ContainerPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((Int32)obj.Id);
        var bytesWritten = NestedData.Serialize(obj.Data, data);
        data = data.Slice(bytesWritten);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace Serializer.Tests.GeneratorTestCases.NestedObject;

public partial class NestedData : ISerializable<NestedData>
{
    public static int GetPacketSize(NestedData obj)
    {
        var size = 0;
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        size += sizeof(float); // Size for unmanaged type Value
        return size;
    }

    public static NestedData Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new NestedData();
        obj.Name = data.ReadString();
        obj.Value = data.ReadSingle();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(NestedData obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteString(obj.Name);
        data.WriteSingle((Single)obj.Value);
        return originalData.Length - data.Length;
    }
}
