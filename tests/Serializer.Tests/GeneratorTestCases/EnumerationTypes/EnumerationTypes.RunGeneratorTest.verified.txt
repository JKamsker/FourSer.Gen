// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace TestNamespace;

public partial class EnumerationTypesPacket : ISerializable<EnumerationTypesPacket>
{
    public static int GetPacketSize(EnumerationTypesPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Numbers
        size += obj.Numbers.Count * sizeof(int);
        size += sizeof(int); // Count size for Names
        foreach(var item in obj.Names) { size += StringEx.MeasureSize(item); }
        size += sizeof(int); // Count size for Data
        size += obj.Data.Count * sizeof(byte);
        size += sizeof(int); // Count size for Values
        size += obj.Values.Count * sizeof(float);
        size += sizeof(int); // Count size for UniqueIds
        size += obj.UniqueIds.Count * sizeof(long);
        size += sizeof(int); // Count size for ProcessingQueue
        size += obj.ProcessingQueue.Count * sizeof(ushort);
        size += sizeof(int); // Count size for ProcessingStack
        size += obj.ProcessingStack.Count * sizeof(uint);
        size += sizeof(int); // Count size for ArrayData
        size += obj.ArrayData.Count * sizeof(int);
        size += sizeof(int); // Count size for Measurements
        size += obj.Measurements.Count * sizeof(double);
        size += sizeof(int); // Count size for Flags
        size += obj.Flags.Count * sizeof(bool);
        size += sizeof(int); // Count size for ObservableData
        size += obj.ObservableData.Count * sizeof(short);
        size += sizeof(int); // Count size for Characters
        size += obj.Characters.Count * sizeof(ushort);
        size += sizeof(int); // Count size for SortedValues
        size += obj.SortedValues.Count * sizeof(long);
        size += sizeof(byte); // Count size for SmallSet
        foreach(var item in obj.SmallSet) { size += StringEx.MeasureSize(item); }
        size += sizeof(ushort); // Count size for MediumQueue
        size += obj.MediumQueue.Count * sizeof(int);
        size += sizeof(int); // Count size for LargeBag
        size += obj.LargeBag.Count * sizeof(long);
        return size;
    }

    public static EnumerationTypesPacket Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new EnumerationTypesPacket();
        var NumbersCount = data.ReadInt32();
        obj.Numbers = new System.Collections.Generic.List<int>(NumbersCount);
        for (int i = 0; i < NumbersCount; i++)
        {
            obj.Numbers.Add(data.ReadInt32());
        }
        var NamesCount = data.ReadInt32();
        var tempNames = new System.Collections.Generic.List<string>(NamesCount);
        for (int i = 0; i < NamesCount; i++)
        {
            tempNames.Add(data.ReadString());
        }
        obj.Names = tempNames;
        var DataCount = data.ReadInt32();
        var tempData = new System.Collections.Generic.List<byte>(DataCount);
        for (int i = 0; i < DataCount; i++)
        {
            tempData.Add(data.ReadByte());
        }
        obj.Data = tempData;
        var ValuesCount = data.ReadInt32();
        var tempValues = new System.Collections.Concurrent.ConcurrentBag<float>();
        for (int i = 0; i < ValuesCount; i++)
        {
            tempValues.Add(data.ReadSingle());
        }
        obj.Values = tempValues;
        var UniqueIdsCount = data.ReadInt32();
        var tempUniqueIds = new System.Collections.Generic.HashSet<long>(UniqueIdsCount);
        for (int i = 0; i < UniqueIdsCount; i++)
        {
            tempUniqueIds.Add(data.ReadInt64());
        }
        obj.UniqueIds = tempUniqueIds;
        var ProcessingQueueCount = data.ReadInt32();
        var tempProcessingQueue = new System.Collections.Generic.Queue<ushort>(ProcessingQueueCount);
        for (int i = 0; i < ProcessingQueueCount; i++)
        {
            tempProcessingQueue.Enqueue(data.ReadUInt16());
        }
        obj.ProcessingQueue = tempProcessingQueue;
        var ProcessingStackCount = data.ReadInt32();
        var tempProcessingStack = new System.Collections.Generic.Stack<uint>(ProcessingStackCount);
        for (int i = 0; i < ProcessingStackCount; i++)
        {
            tempProcessingStack.Push(data.ReadUInt32());
        }
        obj.ProcessingStack = tempProcessingStack;
        var ArrayDataCount = data.ReadInt32();
        obj.ArrayData = new int[ArrayDataCount];
        for (int i = 0; i < ArrayDataCount; i++)
        {
            obj.ArrayData[i] = data.ReadInt32();
        }
        var MeasurementsCount = data.ReadInt32();
        var tempMeasurements = new System.Collections.Generic.List<double>(MeasurementsCount);
        for (int i = 0; i < MeasurementsCount; i++)
        {
            tempMeasurements.Add(data.ReadDouble());
        }
        obj.Measurements = tempMeasurements;
        var FlagsCount = data.ReadInt32();
        var tempFlags = new System.Collections.Generic.List<bool>(FlagsCount);
        for (int i = 0; i < FlagsCount; i++)
        {
            tempFlags.Add(data.ReadBoolean());
        }
        obj.Flags = tempFlags;
        var ObservableDataCount = data.ReadInt32();
        var tempObservableData = new System.Collections.Generic.List<short>(ObservableDataCount);
        for (int i = 0; i < ObservableDataCount; i++)
        {
            tempObservableData.Add(data.ReadInt16());
        }
        obj.ObservableData = tempObservableData;
        var CharactersCount = data.ReadInt32();
        var tempCharacters = new System.Collections.Generic.LinkedList<ushort>();
        for (int i = 0; i < CharactersCount; i++)
        {
            tempCharacters.AddLast(data.ReadUInt16());
        }
        obj.Characters = tempCharacters;
        var SortedValuesCount = data.ReadInt32();
        var tempSortedValues = new System.Collections.Generic.HashSet<long>(SortedValuesCount);
        for (int i = 0; i < SortedValuesCount; i++)
        {
            tempSortedValues.Add(data.ReadInt64());
        }
        obj.SortedValues = tempSortedValues;
        var SmallSetCount = data.ReadByte();
        var tempSmallSet = new System.Collections.Generic.HashSet<string>(SmallSetCount);
        for (int i = 0; i < SmallSetCount; i++)
        {
            tempSmallSet.Add(data.ReadString());
        }
        obj.SmallSet = tempSmallSet;
        var MediumQueueCount = data.ReadUInt16();
        var tempMediumQueue = new System.Collections.Generic.Queue<int>(MediumQueueCount);
        for (int i = 0; i < MediumQueueCount; i++)
        {
            tempMediumQueue.Enqueue(data.ReadInt32());
        }
        obj.MediumQueue = tempMediumQueue;
        var LargeBagCount = data.ReadInt32();
        var tempLargeBag = new System.Collections.Concurrent.ConcurrentBag<long>();
        for (int i = 0; i < LargeBagCount; i++)
        {
            tempLargeBag.Add(data.ReadInt64());
        }
        obj.LargeBag = tempLargeBag;
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(EnumerationTypesPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((int)obj.Numbers.Count);
        for (int i = 0; i < obj.Numbers.Count; i++)
        {
            data.WriteInt32((Int32)obj.Numbers[i]);
        }
        data.WriteInt32((int)obj.Names.Count);
        foreach (var item in obj.Names)
        {
            data.WriteString(item);
        }
        data.WriteInt32((int)obj.Data.Count);
        foreach (var item in obj.Data)
        {
            data.WriteByte((Byte)item);
        }
        data.WriteInt32((int)obj.Values.Count);
        foreach (var item in obj.Values)
        {
            data.WriteSingle((Single)item);
        }
        data.WriteInt32((int)obj.UniqueIds.Count);
        foreach (var item in obj.UniqueIds)
        {
            data.WriteInt64((Int64)item);
        }
        data.WriteInt32((int)obj.ProcessingQueue.Count);
        foreach (var item in obj.ProcessingQueue)
        {
            data.WriteUInt16((UInt16)item);
        }
        data.WriteInt32((int)obj.ProcessingStack.Count);
        foreach (var item in obj.ProcessingStack)
        {
            data.WriteUInt32((UInt32)item);
        }
        data.WriteInt32((int)obj.ArrayData.Count);
        for (int i = 0; i < obj.ArrayData.Count; i++)
        {
            data.WriteInt32((Int32)obj.ArrayData[i]);
        }
        data.WriteInt32((int)obj.Measurements.Count);
        foreach (var item in obj.Measurements)
        {
            data.WriteDouble((Double)item);
        }
        data.WriteInt32((int)obj.Flags.Count);
        foreach (var item in obj.Flags)
        {
            data.WriteBoolean((Boolean)item);
        }
        data.WriteInt32((int)obj.ObservableData.Count);
        foreach (var item in obj.ObservableData)
        {
            data.WriteInt16((Int16)item);
        }
        data.WriteInt32((int)obj.Characters.Count);
        foreach (var item in obj.Characters)
        {
            data.WriteUInt16((UInt16)item);
        }
        data.WriteInt32((int)obj.SortedValues.Count);
        foreach (var item in obj.SortedValues)
        {
            data.WriteInt64((Int64)item);
        }
        data.WriteByte((byte)obj.SmallSet.Count);
        foreach (var item in obj.SmallSet)
        {
            data.WriteString(item);
        }
        data.WriteUInt16((ushort)obj.MediumQueue.Count);
        foreach (var item in obj.MediumQueue)
        {
            data.WriteInt32((Int32)item);
        }
        data.WriteInt32((int)obj.LargeBag.Count);
        foreach (var item in obj.LargeBag)
        {
            data.WriteInt64((Int64)item);
        }
        return originalData.Length - data.Length;
    }
}
