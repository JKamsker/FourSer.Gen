// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace Serializer.Tests.GeneratorTestCases.ListOfStructs;

public partial struct MyStruct : ISerializable<MyStruct>
{
    public static int GetPacketSize(MyStruct obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type A
        return size;
    }

    public static MyStruct Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new MyStruct();
        obj.A = data.ReadInt32();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(MyStruct obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((Int32)obj.A);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace Serializer.Tests.GeneratorTestCases.ListOfStructs;

public partial class PacketWithListOfStructs : ISerializable<PacketWithListOfStructs>
{
    public static int GetPacketSize(PacketWithListOfStructs obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Structs
        foreach(var item in obj.Structs)
        {
            size += MyStruct.GetPacketSize(item);
        }
        return size;
    }

    public static PacketWithListOfStructs Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new PacketWithListOfStructs();
        var StructsCount = data.ReadInt32();
        obj.Structs = new System.Collections.Generic.List<Serializer.Tests.GeneratorTestCases.ListOfStructs.MyStruct>(StructsCount);
        for (int i = 0; i < StructsCount; i++)
        {
            obj.Structs.Add(MyStruct.Deserialize(data, out var itemBytesRead));
            data = data.Slice(itemBytesRead);
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(PacketWithListOfStructs obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((int)obj.Structs.Count);
        for (int i = 0; i < obj.Structs.Count; i++)
        {
            var bytesWritten = MyStruct.Serialize(obj.Structs[i], data);
            data = data.Slice(bytesWritten);
        }
        return originalData.Length - data.Length;
    }
}
