// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace TestNamespace;

public partial class PolymorphicSingleTest : ISerializable<PolymorphicSingleTest>
{
    public static int GetPacketSize(PolymorphicSingleTest obj)
    {
        var size = 0;
        size += sizeof(byte); // Size for unmanaged type AnimalTypeId
        size += sizeof(ushort); // Count size for Animals
        foreach(var item in obj.Animals)
        {
        switch (item)
        {
            case Cat typedInstance:
                size += Cat.GetPacketSize(typedInstance);
                break;
            case Dog typedInstance:
                size += Dog.GetPacketSize(typedInstance);
                break;
            case null: break;
            default:
                throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
        }
        }
        return size;
    }

    public static PolymorphicSingleTest Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new PolymorphicSingleTest();
        obj.AnimalTypeId = data.ReadByte();
        var AnimalsCount = data.ReadUInt16();
        obj.Animals = new System.Collections.Generic.List<TestNamespace.Animal>(AnimalsCount);
        switch (obj.AnimalTypeId)
        {
            case 1:
            {
                for (int i = 0; i < AnimalsCount; i++)
                {
                    var item = Cat.Deserialize(data, out var itemBytesRead);
                    obj.Animals.Add(item);
                    data = data.Slice(itemBytesRead);
                }
                break;
            }
            case 2:
            {
                for (int i = 0; i < AnimalsCount; i++)
                {
                    var item = Dog.Deserialize(data, out var itemBytesRead);
                    obj.Animals.Add(item);
                    data = data.Slice(itemBytesRead);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Animals: {obj.AnimalTypeId}");
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(PolymorphicSingleTest obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteByte((Byte)obj.AnimalTypeId);
        data.WriteUInt16((ushort)obj.Animals.Count);
        switch (obj.AnimalTypeId)
        {
            case 1:
            {
                foreach(var item in obj.Animals)
                {
                    var bytesWritten = Cat.Serialize((Cat)item, data);
                    data = data.Slice(bytesWritten);
                }
                break;
            }
            case 2:
            {
                foreach(var item in obj.Animals)
                {
                    var bytesWritten = Dog.Serialize((Dog)item, data);
                    data = data.Slice(bytesWritten);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Animals: {obj.AnimalTypeId}");
        }
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace TestNamespace;

public partial class Cat : ISerializable<Cat>
{
    public static int GetPacketSize(Cat obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    public static new Cat Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Cat();
        obj.Id = data.ReadInt32();
        obj.Name = data.ReadString();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Cat obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((Int32)obj.Id);
        data.WriteString(obj.Name);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace TestNamespace;

public partial class Dog : ISerializable<Dog>
{
    public static int GetPacketSize(Dog obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Breed); // Size for string Breed
        return size;
    }

    public static new Dog Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Dog();
        obj.Id = data.ReadInt32();
        obj.Breed = data.ReadString();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Dog obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((Int32)obj.Id);
        data.WriteString(obj.Breed);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using Serializer.Contracts;
using System.IO;
using Serializer.Generator.Helpers;

namespace TestNamespace;

public partial class Animal : ISerializable<Animal>
{
    public static int GetPacketSize(Animal obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        return size;
    }

    public static Animal Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Animal();
        obj.Id = data.ReadInt32();
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Animal obj, System.Span<byte> data)
    {
        var originalData = data;
        data.WriteInt32((Int32)obj.Id);
        return originalData.Length - data.Length;
    }
}
