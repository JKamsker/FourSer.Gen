// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.EnumerationTypes;

public partial class EnumerationTypesPacket : ISerializable<EnumerationTypesPacket>
{
    public static int GetPacketSize(EnumerationTypesPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Numbers
        size += obj.Numbers.Count * sizeof(int);
        size += sizeof(int); // Count size for Names
        foreach(var item in obj.Names) { size += StringEx.MeasureSize(item); }
        size += sizeof(int); // Count size for Data
        size += obj.Data.Count() * sizeof(byte);
        size += sizeof(int); // Count size for Data1
        size += obj.Data1.Count * sizeof(byte);
        size += sizeof(int); // Count size for Values
        size += obj.Values.Count * sizeof(float);
        size += sizeof(int); // Count size for UniqueIds
        size += obj.UniqueIds.Count * sizeof(long);
        size += sizeof(int); // Count size for ProcessingQueue
        size += obj.ProcessingQueue.Count * sizeof(ushort);
        size += sizeof(int); // Count size for ProcessingStack
        size += obj.ProcessingStack.Count * sizeof(uint);
        size += sizeof(int); // Count size for ArrayData
        size += obj.ArrayData.Length * sizeof(int);
        size += sizeof(int); // Count size for Measurements
        size += obj.Measurements.Count() * sizeof(double);
        size += sizeof(int); // Count size for Flags
        size += obj.Flags.Count * sizeof(bool);
        size += sizeof(int); // Count size for ObservableData
        size += obj.ObservableData.Count * sizeof(short);
        size += sizeof(int); // Count size for Characters
        size += obj.Characters.Count * sizeof(ushort);
        size += sizeof(int); // Count size for SortedValues
        size += obj.SortedValues.Count * sizeof(long);
        size += sizeof(byte); // Count size for SmallSet
        foreach(var item in obj.SmallSet) { size += StringEx.MeasureSize(item); }
        size += sizeof(ushort); // Count size for MediumQueue
        size += obj.MediumQueue.Count * sizeof(int);
        size += sizeof(int); // Count size for LargeBag
        size += obj.LargeBag.Count * sizeof(long);
        return size;
    }

    public static EnumerationTypesPacket Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new EnumerationTypesPacket();
        var numbersCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Numbers = new System.Collections.Generic.List<int>((int)numbersCount);
        for (int i = 0; i < (int)numbersCount; i++)
        {
            obj.Numbers.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data));
        }
        var namesCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Names = new System.Collections.Generic.List<string>((int)namesCount);
        for (int i = 0; i < (int)namesCount; i++)
        {
            obj.Names.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref data));
        }
        var dataCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Data = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadBytes(ref data, dataCount);
        var data1Count = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Data1 = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadBytes(ref data, data1Count).ToList();
        var valuesCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Values = new System.Collections.Concurrent.ConcurrentBag<float>();
        for (int i = 0; i < (int)valuesCount; i++)
        {
            obj.Values.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadSingle(ref data));
        }
        var uniqueIdsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.UniqueIds = new System.Collections.Generic.HashSet<long>((int)uniqueIdsCount);
        for (int i = 0; i < (int)uniqueIdsCount; i++)
        {
            obj.UniqueIds.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt64(ref data));
        }
        var processingQueueCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.ProcessingQueue = new System.Collections.Generic.Queue<ushort>((int)processingQueueCount);
        for (int i = 0; i < (int)processingQueueCount; i++)
        {
            obj.ProcessingQueue.Enqueue(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt16(ref data));
        }
        var processingStackCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.ProcessingStack = new System.Collections.Generic.Stack<uint>((int)processingStackCount);
        for (int i = 0; i < (int)processingStackCount; i++)
        {
            obj.ProcessingStack.Push(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt32(ref data));
        }
        var arrayDataCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.ArrayData = new int[(int)arrayDataCount];
        for (int i = 0; i < (int)arrayDataCount; i++)
        {
            obj.ArrayData[i] = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        }
        var measurementsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Measurements = new System.Collections.Generic.List<double>((int)measurementsCount);
        for (int i = 0; i < (int)measurementsCount; i++)
        {
            obj.Measurements.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadDouble(ref data));
        }
        var flagsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Flags = new System.Collections.ObjectModel.Collection<bool>();
        for (int i = 0; i < (int)flagsCount; i++)
        {
            obj.Flags.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadBoolean(ref data));
        }
        var observableDataCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.ObservableData = new System.Collections.ObjectModel.ObservableCollection<short>();
        for (int i = 0; i < (int)observableDataCount; i++)
        {
            obj.ObservableData.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt16(ref data));
        }
        var charactersCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Characters = new System.Collections.Generic.LinkedList<ushort>();
        for (int i = 0; i < (int)charactersCount; i++)
        {
            obj.Characters.AddLast(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt16(ref data));
        }
        var sortedValuesCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.SortedValues = new System.Collections.Generic.SortedSet<long>();
        for (int i = 0; i < (int)sortedValuesCount; i++)
        {
            obj.SortedValues.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt64(ref data));
        }
        var smallSetCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadByte(ref data);
        obj.SmallSet = new System.Collections.Generic.HashSet<string>((int)smallSetCount);
        for (int i = 0; i < (int)smallSetCount; i++)
        {
            obj.SmallSet.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref data));
        }
        var mediumQueueCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt16(ref data);
        obj.MediumQueue = new System.Collections.Generic.Queue<int>((int)mediumQueueCount);
        for (int i = 0; i < (int)mediumQueueCount; i++)
        {
            obj.MediumQueue.Enqueue(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data));
        }
        var largeBagCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.LargeBag = new System.Collections.Concurrent.ConcurrentBag<long>();
        for (int i = 0; i < (int)largeBagCount; i++)
        {
            obj.LargeBag.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt64(ref data));
        }
        return obj;
        bytesRead = originalData.Length - data.Length;
    }

    public static int Serialize(EnumerationTypesPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Numbers.Count);
        for (int i = 0; i < obj.Numbers.Count; i++)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Numbers[i]);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Names.Count());
        foreach (var item in obj.Names)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Data.Count());
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteBytes(ref data, obj.Data);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Data1.Count);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteBytes(ref data, obj.Data1);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Values.Count);
        foreach (var item in obj.Values)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteSingle(ref data, (Single)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.UniqueIds.Count);
        foreach (var item in obj.UniqueIds)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.ProcessingQueue.Count);
        foreach (var item in obj.ProcessingQueue)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt16(ref data, (UInt16)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.ProcessingStack.Count);
        foreach (var item in obj.ProcessingStack)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt32(ref data, (UInt32)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.ArrayData.Length);
        for (int i = 0; i < obj.ArrayData.Length; i++)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.ArrayData[i]);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Measurements.Count());
        foreach (var item in obj.Measurements)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteDouble(ref data, (Double)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Flags.Count);
        foreach (var item in obj.Flags)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteBoolean(ref data, (Boolean)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.ObservableData.Count);
        foreach (var item in obj.ObservableData)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt16(ref data, (Int16)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Characters.Count);
        foreach (var item in obj.Characters)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt16(ref data, (UInt16)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.SortedValues.Count);
        foreach (var item in obj.SortedValues)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteByte(ref data, (byte)obj.SmallSet.Count);
        foreach (var item in obj.SmallSet)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt16(ref data, (ushort)obj.MediumQueue.Count);
        foreach (var item in obj.MediumQueue)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)item);
        }
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.LargeBag.Count);
        foreach (var item in obj.LargeBag)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
        }
        return originalData.Length - data.Length;
    }
}
