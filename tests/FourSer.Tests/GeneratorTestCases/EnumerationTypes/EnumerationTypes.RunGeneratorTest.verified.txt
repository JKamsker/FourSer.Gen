// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.EnumerationTypes;

public partial class EnumerationTypesPacket : ISerializable<EnumerationTypesPacket>
{
    public static int GetPacketSize(EnumerationTypesPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Numbers
        size += obj.Numbers.Count * sizeof(int);
        size += sizeof(int); // Count size for Names
        foreach(var item in obj.Names) { size += StringEx.MeasureSize(item); }
        size += sizeof(int); // Count size for Data
        size += obj.Data.Count() * sizeof(byte);
        size += sizeof(int); // Count size for Data1
        size += obj.Data1.Count * sizeof(byte);
        size += sizeof(int); // Count size for Values
        size += obj.Values.Count * sizeof(float);
        size += sizeof(int); // Count size for UniqueIds
        size += obj.UniqueIds.Count * sizeof(long);
        size += sizeof(int); // Count size for ProcessingQueue
        size += obj.ProcessingQueue.Count * sizeof(ushort);
        size += sizeof(int); // Count size for ProcessingStack
        size += obj.ProcessingStack.Count * sizeof(uint);
        size += sizeof(int); // Count size for ArrayData
        size += obj.ArrayData.Length * sizeof(int);
        size += sizeof(int); // Count size for Measurements
        size += obj.Measurements.Count() * sizeof(double);
        size += sizeof(int); // Count size for Flags
        size += obj.Flags.Count * sizeof(bool);
        size += sizeof(int); // Count size for ObservableData
        size += obj.ObservableData.Count * sizeof(short);
        size += sizeof(int); // Count size for Characters
        size += obj.Characters.Count * sizeof(ushort);
        size += sizeof(int); // Count size for SortedValues
        size += obj.SortedValues.Count * sizeof(long);
        size += sizeof(byte); // Count size for SmallSet
        foreach(var item in obj.SmallSet) { size += StringEx.MeasureSize(item); }
        size += sizeof(ushort); // Count size for MediumQueue
        size += obj.MediumQueue.Count * sizeof(int);
        size += sizeof(int); // Count size for LargeBag
        size += obj.LargeBag.Count * sizeof(long);
        return size;
    }

    public static EnumerationTypesPacket Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new EnumerationTypesPacket();
        var NumbersCount = RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Numbers = new System.Collections.Generic.List<int>(NumbersCount);
        for (int i = 0; i < NumbersCount; i++)
        {
            obj.Numbers.Add(RoSpanReaderHelpers.ReadInt32(ref data));
        }
        var NamesCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempNames = new System.Collections.Generic.List<string>(NamesCount);
        for (int i = 0; i < NamesCount; i++)
        {
            tempNames.Add(RoSpanReaderHelpers.ReadString(ref data));
        }
        obj.Names = tempNames;
        var DataCount = RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Data = RoSpanReaderHelpers.ReadBytes(ref data, DataCount);
        var Data1Count = RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Data1 = RoSpanReaderHelpers.ReadBytes(ref data, Data1Count).ToList();
        var ValuesCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempValues = new System.Collections.Concurrent.ConcurrentBag<float>();
        for (int i = 0; i < ValuesCount; i++)
        {
            tempValues.Add(RoSpanReaderHelpers.ReadSingle(ref data));
        }
        obj.Values = tempValues;
        var UniqueIdsCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempUniqueIds = new System.Collections.Generic.HashSet<long>(UniqueIdsCount);
        for (int i = 0; i < UniqueIdsCount; i++)
        {
            tempUniqueIds.Add(RoSpanReaderHelpers.ReadInt64(ref data));
        }
        obj.UniqueIds = tempUniqueIds;
        var ProcessingQueueCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempProcessingQueue = new System.Collections.Generic.Queue<ushort>(ProcessingQueueCount);
        for (int i = 0; i < ProcessingQueueCount; i++)
        {
            tempProcessingQueue.Enqueue(RoSpanReaderHelpers.ReadUInt16(ref data));
        }
        obj.ProcessingQueue = tempProcessingQueue;
        var ProcessingStackCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempProcessingStack = new System.Collections.Generic.Stack<uint>(ProcessingStackCount);
        for (int i = 0; i < ProcessingStackCount; i++)
        {
            tempProcessingStack.Push(RoSpanReaderHelpers.ReadUInt32(ref data));
        }
        obj.ProcessingStack = tempProcessingStack;
        var ArrayDataCount = RoSpanReaderHelpers.ReadInt32(ref data);
        obj.ArrayData = new int[ArrayDataCount];
        for (int i = 0; i < ArrayDataCount; i++)
        {
            obj.ArrayData[i] = RoSpanReaderHelpers.ReadInt32(ref data);
        }
        var MeasurementsCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempMeasurements = new System.Collections.Generic.List<double>(MeasurementsCount);
        for (int i = 0; i < MeasurementsCount; i++)
        {
            tempMeasurements.Add(RoSpanReaderHelpers.ReadDouble(ref data));
        }
        obj.Measurements = tempMeasurements;
        var FlagsCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempFlags = new System.Collections.ObjectModel.Collection<bool>();
        for (int i = 0; i < FlagsCount; i++)
        {
            tempFlags.Add(RoSpanReaderHelpers.ReadBoolean(ref data));
        }
        obj.Flags = tempFlags;
        var ObservableDataCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempObservableData = new System.Collections.ObjectModel.ObservableCollection<short>();
        for (int i = 0; i < ObservableDataCount; i++)
        {
            tempObservableData.Add(RoSpanReaderHelpers.ReadInt16(ref data));
        }
        obj.ObservableData = tempObservableData;
        var CharactersCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempCharacters = new System.Collections.Generic.LinkedList<ushort>();
        for (int i = 0; i < CharactersCount; i++)
        {
            tempCharacters.AddLast(RoSpanReaderHelpers.ReadUInt16(ref data));
        }
        obj.Characters = tempCharacters;
        var SortedValuesCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempSortedValues = new System.Collections.Generic.SortedSet<long>();
        for (int i = 0; i < SortedValuesCount; i++)
        {
            tempSortedValues.Add(RoSpanReaderHelpers.ReadInt64(ref data));
        }
        obj.SortedValues = tempSortedValues;
        var SmallSetCount = RoSpanReaderHelpers.ReadByte(ref data);
        var tempSmallSet = new System.Collections.Generic.HashSet<string>(SmallSetCount);
        for (int i = 0; i < SmallSetCount; i++)
        {
            tempSmallSet.Add(RoSpanReaderHelpers.ReadString(ref data));
        }
        obj.SmallSet = tempSmallSet;
        var MediumQueueCount = RoSpanReaderHelpers.ReadUInt16(ref data);
        var tempMediumQueue = new System.Collections.Generic.Queue<int>(MediumQueueCount);
        for (int i = 0; i < MediumQueueCount; i++)
        {
            tempMediumQueue.Enqueue(RoSpanReaderHelpers.ReadInt32(ref data));
        }
        obj.MediumQueue = tempMediumQueue;
        var LargeBagCount = RoSpanReaderHelpers.ReadInt32(ref data);
        var tempLargeBag = new System.Collections.Concurrent.ConcurrentBag<long>();
        for (int i = 0; i < LargeBagCount; i++)
        {
            tempLargeBag.Add(RoSpanReaderHelpers.ReadInt64(ref data));
        }
        obj.LargeBag = tempLargeBag;
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(EnumerationTypesPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Numbers.Count);
        for (int i = 0; i < obj.Numbers.Count; i++)
        {
            SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Numbers[i]);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Names.Count());
        foreach (var item in obj.Names)
        {
            SpanWriterHelpers.WriteString(ref data, item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Data.Count());
        SpanWriterHelpers.WriteBytes(ref data, obj.Data);
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Data1.Count);
        SpanWriterHelpers.WriteBytes(ref data, obj.Data1);
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Values.Count);
        foreach (var item in obj.Values)
        {
            SpanWriterHelpers.WriteSingle(ref data, (Single)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.UniqueIds.Count);
        foreach (var item in obj.UniqueIds)
        {
            SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.ProcessingQueue.Count);
        foreach (var item in obj.ProcessingQueue)
        {
            SpanWriterHelpers.WriteUInt16(ref data, (UInt16)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.ProcessingStack.Count);
        foreach (var item in obj.ProcessingStack)
        {
            SpanWriterHelpers.WriteUInt32(ref data, (UInt32)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.ArrayData.Length);
        for (int i = 0; i < obj.ArrayData.Length; i++)
        {
            SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.ArrayData[i]);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Measurements.Count());
        foreach (var item in obj.Measurements)
        {
            SpanWriterHelpers.WriteDouble(ref data, (Double)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Flags.Count);
        foreach (var item in obj.Flags)
        {
            SpanWriterHelpers.WriteBoolean(ref data, (Boolean)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.ObservableData.Count);
        foreach (var item in obj.ObservableData)
        {
            SpanWriterHelpers.WriteInt16(ref data, (Int16)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Characters.Count);
        foreach (var item in obj.Characters)
        {
            SpanWriterHelpers.WriteUInt16(ref data, (UInt16)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.SortedValues.Count);
        foreach (var item in obj.SortedValues)
        {
            SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
        }
        SpanWriterHelpers.WriteByte(ref data, (byte)obj.SmallSet.Count);
        foreach (var item in obj.SmallSet)
        {
            SpanWriterHelpers.WriteString(ref data, item);
        }
        SpanWriterHelpers.WriteUInt16(ref data, (ushort)obj.MediumQueue.Count);
        foreach (var item in obj.MediumQueue)
        {
            SpanWriterHelpers.WriteInt32(ref data, (Int32)item);
        }
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.LargeBag.Count);
        foreach (var item in obj.LargeBag)
        {
            SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
        }
        return originalData.Length - data.Length;
    }
}
