// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.EnumerationTypes;

public partial class EnumerationTypesPacket : ISerializable<EnumerationTypesPacket>
{
    public static int GetPacketSize(EnumerationTypesPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for LargeBag
        size += obj.LargeBag.Count * sizeof(long);
        size += sizeof(ushort); // Count size for MediumQueue
        size += obj.MediumQueue.Count * sizeof(int);
        size += sizeof(byte); // Count size for SmallSet
        foreach(var item in obj.SmallSet) { size += StringEx.MeasureSize(item); }
        size += sizeof(int); // Count size for SortedValues
        size += obj.SortedValues.Count * sizeof(long);
        size += sizeof(int); // Count size for Characters
        size += obj.Characters.Count * sizeof(ushort);
        size += sizeof(int); // Count size for ObservableData
        size += obj.ObservableData.Count * sizeof(short);
        size += sizeof(int); // Count size for Flags
        size += obj.Flags.Count * sizeof(bool);
        size += sizeof(int); // Count size for Measurements
        size += obj.Measurements.Count() * sizeof(double);
        size += sizeof(int); // Count size for ArrayData
        size += obj.ArrayData.Length * sizeof(int);
        size += sizeof(int); // Count size for ProcessingStack
        size += obj.ProcessingStack.Count * sizeof(uint);
        size += sizeof(int); // Count size for ProcessingQueue
        size += obj.ProcessingQueue.Count * sizeof(ushort);
        size += sizeof(int); // Count size for UniqueIds
        size += obj.UniqueIds.Count * sizeof(long);
        size += sizeof(int); // Count size for Values
        size += obj.Values.Count * sizeof(float);
        size += sizeof(int); // Count size for Data1
        size += obj.Data1.Count * sizeof(byte);
        size += sizeof(int); // Count size for Data
        size += obj.Data.Count() * sizeof(byte);
        size += sizeof(int); // Count size for Names
        foreach(var item in obj.Names) { size += StringEx.MeasureSize(item); }
        size += sizeof(int); // Count size for Numbers
        size += obj.Numbers.Count * sizeof(int);
        return size;
    }

    private EnumerationTypesPacket(System.Collections.Concurrent.ConcurrentBag<long> largeBag, System.Collections.Generic.Queue<int> mediumQueue, System.Collections.Generic.HashSet<string> smallSet, System.Collections.Generic.SortedSet<long> sortedValues, System.Collections.Generic.LinkedList<ushort> characters, System.Collections.ObjectModel.ObservableCollection<short> observableData, System.Collections.ObjectModel.Collection<bool> flags, System.Collections.Generic.IList<double> measurements, int[] arrayData, System.Collections.Generic.Stack<uint> processingStack, System.Collections.Generic.Queue<ushort> processingQueue, System.Collections.Generic.HashSet<long> uniqueIds, System.Collections.Concurrent.ConcurrentBag<float> values, System.Collections.Generic.List<byte> data1, System.Collections.Generic.IEnumerable<byte> data, System.Collections.Generic.ICollection<string> names, System.Collections.Generic.List<int> numbers)
    {
        this.LargeBag = largeBag;
        this.MediumQueue = mediumQueue;
        this.SmallSet = smallSet;
        this.SortedValues = sortedValues;
        this.Characters = characters;
        this.ObservableData = observableData;
        this.Flags = flags;
        this.Measurements = measurements;
        this.ArrayData = arrayData;
        this.ProcessingStack = processingStack;
        this.ProcessingQueue = processingQueue;
        this.UniqueIds = uniqueIds;
        this.Values = values;
        this.Data1 = data1;
        this.Data = data;
        this.Names = names;
        this.Numbers = numbers;
    }

    public EnumerationTypesPacket()
    {
        this.LargeBag = default;
        this.MediumQueue = default;
        this.SmallSet = default;
        this.SortedValues = default;
        this.Characters = default;
        this.ObservableData = default;
        this.Flags = default;
        this.Measurements = default;
        this.ArrayData = default;
        this.ProcessingStack = default;
        this.ProcessingQueue = default;
        this.UniqueIds = default;
        this.Values = default;
        this.Data1 = default;
        this.Data = default;
        this.Names = default;
        this.Numbers = default;
    }

    public static EnumerationTypesPacket Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var largeBagCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var largeBag = new System.Collections.Concurrent.ConcurrentBag<long>();
        for (int i = 0; i < largeBagCount; i++)
        {
            largeBag.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt64(ref buffer));
        }
        var mediumQueueCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt16(ref buffer);
        var mediumQueue = new System.Collections.Generic.Queue<int>(mediumQueueCount);
        for (int i = 0; i < mediumQueueCount; i++)
        {
            mediumQueue.Enqueue(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer));
        }
        var smallSetCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadByte(ref buffer);
        var smallSet = new System.Collections.Generic.HashSet<string>(smallSetCount);
        for (int i = 0; i < smallSetCount; i++)
        {
            smallSet.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer));
        }
        var sortedValuesCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var sortedValues = new System.Collections.Generic.SortedSet<long>();
        for (int i = 0; i < sortedValuesCount; i++)
        {
            sortedValues.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt64(ref buffer));
        }
        var charactersCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var characters = new System.Collections.Generic.LinkedList<ushort>();
        for (int i = 0; i < charactersCount; i++)
        {
            characters.AddLast(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt16(ref buffer));
        }
        var observableDataCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var observableData = new System.Collections.ObjectModel.ObservableCollection<short>();
        for (int i = 0; i < observableDataCount; i++)
        {
            observableData.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt16(ref buffer));
        }
        var flagsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var flags = new System.Collections.ObjectModel.Collection<bool>();
        for (int i = 0; i < flagsCount; i++)
        {
            flags.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadBoolean(ref buffer));
        }
        var measurementsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var measurements = new System.Collections.Generic.List<double>(measurementsCount);
        for (int i = 0; i < measurementsCount; i++)
        {
            measurements.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadDouble(ref buffer));
        }
        var arrayDataCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var arrayData = new int[arrayDataCount];
        for (int i = 0; i < arrayDataCount; i++)
        {
            arrayData[i] = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        }
        var processingStackCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var processingStack = new System.Collections.Generic.Stack<uint>(processingStackCount);
        for (int i = 0; i < processingStackCount; i++)
        {
            processingStack.Push(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt32(ref buffer));
        }
        var processingQueueCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var processingQueue = new System.Collections.Generic.Queue<ushort>(processingQueueCount);
        for (int i = 0; i < processingQueueCount; i++)
        {
            processingQueue.Enqueue(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt16(ref buffer));
        }
        var uniqueIdsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var uniqueIds = new System.Collections.Generic.HashSet<long>(uniqueIdsCount);
        for (int i = 0; i < uniqueIdsCount; i++)
        {
            uniqueIds.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt64(ref buffer));
        }
        var valuesCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var values = new System.Collections.Concurrent.ConcurrentBag<float>();
        for (int i = 0; i < valuesCount; i++)
        {
            values.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadSingle(ref buffer));
        }
        var data1Count = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var data1 = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadBytes(ref buffer, (int)data1Count).ToList();
        var dataCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var data = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadBytes(ref buffer, (int)dataCount);
        var namesCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var names = new System.Collections.Generic.List<string>(namesCount);
        for (int i = 0; i < namesCount; i++)
        {
            names.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer));
        }
        var numbersCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var numbers = new System.Collections.Generic.List<int>(numbersCount);
        for (int i = 0; i < numbersCount; i++)
        {
            numbers.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer));
        }
        var obj = new EnumerationTypesPacket(largeBag, mediumQueue, smallSet, sortedValues, characters, observableData, flags, measurements, arrayData, processingStack, processingQueue, uniqueIds, values, data1, data, names, numbers);
        return obj;
    }

    public static EnumerationTypesPacket Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static EnumerationTypesPacket Deserialize(System.IO.Stream stream)
    {
        var largeBagCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var largeBag = new System.Collections.Concurrent.ConcurrentBag<long>();
        for (int i = 0; i < largeBagCount; i++)
        {
            largeBag.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt64(stream));
        }
        var mediumQueueCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadUInt16(stream);
        var mediumQueue = new System.Collections.Generic.Queue<int>(mediumQueueCount);
        for (int i = 0; i < mediumQueueCount; i++)
        {
            mediumQueue.Enqueue(FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream));
        }
        var smallSetCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadByte(stream);
        var smallSet = new System.Collections.Generic.HashSet<string>(smallSetCount);
        for (int i = 0; i < smallSetCount; i++)
        {
            smallSet.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadString(stream));
        }
        var sortedValuesCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var sortedValues = new System.Collections.Generic.SortedSet<long>();
        for (int i = 0; i < sortedValuesCount; i++)
        {
            sortedValues.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt64(stream));
        }
        var charactersCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var characters = new System.Collections.Generic.LinkedList<ushort>();
        for (int i = 0; i < charactersCount; i++)
        {
            characters.AddLast(FourSer.Gen.Helpers.StreamReaderHelpers.ReadUInt16(stream));
        }
        var observableDataCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var observableData = new System.Collections.ObjectModel.ObservableCollection<short>();
        for (int i = 0; i < observableDataCount; i++)
        {
            observableData.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt16(stream));
        }
        var flagsCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var flags = new System.Collections.ObjectModel.Collection<bool>();
        for (int i = 0; i < flagsCount; i++)
        {
            flags.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadBoolean(stream));
        }
        var measurementsCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var measurements = new System.Collections.Generic.List<double>(measurementsCount);
        for (int i = 0; i < measurementsCount; i++)
        {
            measurements.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadDouble(stream));
        }
        var arrayDataCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var arrayData = new int[arrayDataCount];
        for (int i = 0; i < arrayDataCount; i++)
        {
            arrayData[i] = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        }
        var processingStackCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var processingStack = new System.Collections.Generic.Stack<uint>(processingStackCount);
        for (int i = 0; i < processingStackCount; i++)
        {
            processingStack.Push(FourSer.Gen.Helpers.StreamReaderHelpers.ReadUInt32(stream));
        }
        var processingQueueCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var processingQueue = new System.Collections.Generic.Queue<ushort>(processingQueueCount);
        for (int i = 0; i < processingQueueCount; i++)
        {
            processingQueue.Enqueue(FourSer.Gen.Helpers.StreamReaderHelpers.ReadUInt16(stream));
        }
        var uniqueIdsCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var uniqueIds = new System.Collections.Generic.HashSet<long>(uniqueIdsCount);
        for (int i = 0; i < uniqueIdsCount; i++)
        {
            uniqueIds.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt64(stream));
        }
        var valuesCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var values = new System.Collections.Concurrent.ConcurrentBag<float>();
        for (int i = 0; i < valuesCount; i++)
        {
            values.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadSingle(stream));
        }
        var data1Count = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var data1 = FourSer.Gen.Helpers.StreamReaderHelpers.ReadBytes(stream, (int)data1Count).ToList();
        var dataCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var data = FourSer.Gen.Helpers.StreamReaderHelpers.ReadBytes(stream, (int)dataCount);
        var namesCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var names = new System.Collections.Generic.List<string>(namesCount);
        for (int i = 0; i < namesCount; i++)
        {
            names.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadString(stream));
        }
        var numbersCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var numbers = new System.Collections.Generic.List<int>(numbersCount);
        for (int i = 0; i < numbersCount; i++)
        {
            numbers.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream));
        }
        var obj = new EnumerationTypesPacket(largeBag, mediumQueue, smallSet, sortedValues, characters, observableData, flags, measurements, arrayData, processingStack, processingQueue, uniqueIds, values, data1, data, names, numbers);
        return obj;
    }

    public static int Serialize(EnumerationTypesPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.LargeBag is null)
        {
            throw new System.NullReferenceException($"Collection \"LargeBag\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.LargeBag.Count);
            foreach (var item in obj.LargeBag)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
            }
        }
        if (obj.MediumQueue is null)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt16(ref data, (ushort)0);
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt16(ref data, (ushort)obj.MediumQueue.Count);
            foreach (var item in obj.MediumQueue)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)item);
            }
        }
        if (obj.SmallSet is null)
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteByte(ref data, (byte)0);
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteByte(ref data, (byte)obj.SmallSet.Count);
            foreach (var item in obj.SmallSet)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, item);
            }
        }
        if (obj.SortedValues is null)
        {
            throw new System.NullReferenceException($"Collection \"SortedValues\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.SortedValues.Count);
            foreach (var item in obj.SortedValues)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
            }
        }
        if (obj.Characters is null)
        {
            throw new System.NullReferenceException($"Collection \"Characters\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Characters.Count);
            foreach (var item in obj.Characters)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt16(ref data, (UInt16)item);
            }
        }
        if (obj.ObservableData is null)
        {
            throw new System.NullReferenceException($"Collection \"ObservableData\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.ObservableData.Count);
            foreach (var item in obj.ObservableData)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt16(ref data, (Int16)item);
            }
        }
        if (obj.Flags is null)
        {
            throw new System.NullReferenceException($"Collection \"Flags\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Flags.Count);
            foreach (var item in obj.Flags)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteBoolean(ref data, (Boolean)item);
            }
        }
        if (obj.Measurements is null)
        {
            throw new System.NullReferenceException($"Collection \"Measurements\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Measurements.Count());
            foreach (var item in obj.Measurements)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteDouble(ref data, (Double)item);
            }
        }
        if (obj.ArrayData is null)
        {
            throw new System.NullReferenceException($"Collection \"ArrayData\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.ArrayData.Length);
            for (int i = 0; i < obj.ArrayData.Length; i++)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.ArrayData[i]);
            }
        }
        if (obj.ProcessingStack is null)
        {
            throw new System.NullReferenceException($"Collection \"ProcessingStack\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.ProcessingStack.Count);
            foreach (var item in obj.ProcessingStack)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt32(ref data, (UInt32)item);
            }
        }
        if (obj.ProcessingQueue is null)
        {
            throw new System.NullReferenceException($"Collection \"ProcessingQueue\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.ProcessingQueue.Count);
            foreach (var item in obj.ProcessingQueue)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt16(ref data, (UInt16)item);
            }
        }
        if (obj.UniqueIds is null)
        {
            throw new System.NullReferenceException($"Collection \"UniqueIds\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.UniqueIds.Count);
            foreach (var item in obj.UniqueIds)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt64(ref data, (Int64)item);
            }
        }
        if (obj.Values is null)
        {
            throw new System.NullReferenceException($"Collection \"Values\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Values.Count);
            foreach (var item in obj.Values)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteSingle(ref data, (Single)item);
            }
        }
        if (obj.Data1 is null)
        {
            throw new System.NullReferenceException($"Collection \"Data1\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Data1.Count);
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteBytes(ref data, obj.Data1);
        }
        if (obj.Data is null)
        {
            throw new System.NullReferenceException($"Collection \"Data\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Data.Count());
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteBytes(ref data, obj.Data);
        }
        if (obj.Names is null)
        {
            throw new System.NullReferenceException($"Collection \"Names\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Names.Count());
            foreach (var item in obj.Names)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, item);
            }
        }
        if (obj.Numbers is null)
        {
            throw new System.NullReferenceException($"Collection \"Numbers\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Numbers.Count);
            for (int i = 0; i < obj.Numbers.Count; i++)
            {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Numbers[i]);
            }
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(EnumerationTypesPacket obj, System.IO.Stream stream)
    {
        if (obj.LargeBag is null)
        {
            throw new System.NullReferenceException($"Collection \"LargeBag\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.LargeBag.Count);
            foreach (var item in obj.LargeBag)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt64(stream, (Int64)item);
            }
        }
        if (obj.MediumQueue is null)
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteUInt16(stream, (ushort)0);
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteUInt16(stream, (ushort)obj.MediumQueue.Count);
            foreach (var item in obj.MediumQueue)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (Int32)item);
            }
        }
        if (obj.SmallSet is null)
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteByte(stream, (byte)0);
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteByte(stream, (byte)obj.SmallSet.Count);
            foreach (var item in obj.SmallSet)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteString(stream, item);
            }
        }
        if (obj.SortedValues is null)
        {
            throw new System.NullReferenceException($"Collection \"SortedValues\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.SortedValues.Count);
            foreach (var item in obj.SortedValues)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt64(stream, (Int64)item);
            }
        }
        if (obj.Characters is null)
        {
            throw new System.NullReferenceException($"Collection \"Characters\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Characters.Count);
            foreach (var item in obj.Characters)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteUInt16(stream, (UInt16)item);
            }
        }
        if (obj.ObservableData is null)
        {
            throw new System.NullReferenceException($"Collection \"ObservableData\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.ObservableData.Count);
            foreach (var item in obj.ObservableData)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt16(stream, (Int16)item);
            }
        }
        if (obj.Flags is null)
        {
            throw new System.NullReferenceException($"Collection \"Flags\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Flags.Count);
            foreach (var item in obj.Flags)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteBoolean(stream, (Boolean)item);
            }
        }
        if (obj.Measurements is null)
        {
            throw new System.NullReferenceException($"Collection \"Measurements\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Measurements.Count());
            foreach (var item in obj.Measurements)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteDouble(stream, (Double)item);
            }
        }
        if (obj.ArrayData is null)
        {
            throw new System.NullReferenceException($"Collection \"ArrayData\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.ArrayData.Length);
            for (int i = 0; i < obj.ArrayData.Length; i++)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (Int32)obj.ArrayData[i]);
            }
        }
        if (obj.ProcessingStack is null)
        {
            throw new System.NullReferenceException($"Collection \"ProcessingStack\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.ProcessingStack.Count);
            foreach (var item in obj.ProcessingStack)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteUInt32(stream, (UInt32)item);
            }
        }
        if (obj.ProcessingQueue is null)
        {
            throw new System.NullReferenceException($"Collection \"ProcessingQueue\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.ProcessingQueue.Count);
            foreach (var item in obj.ProcessingQueue)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteUInt16(stream, (UInt16)item);
            }
        }
        if (obj.UniqueIds is null)
        {
            throw new System.NullReferenceException($"Collection \"UniqueIds\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.UniqueIds.Count);
            foreach (var item in obj.UniqueIds)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt64(stream, (Int64)item);
            }
        }
        if (obj.Values is null)
        {
            throw new System.NullReferenceException($"Collection \"Values\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Values.Count);
            foreach (var item in obj.Values)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteSingle(stream, (Single)item);
            }
        }
        if (obj.Data1 is null)
        {
            throw new System.NullReferenceException($"Collection \"Data1\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Data1.Count);
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteBytes(stream, obj.Data1);
        }
        if (obj.Data is null)
        {
            throw new System.NullReferenceException($"Collection \"Data\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Data.Count());
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteBytes(stream, obj.Data);
        }
        if (obj.Names is null)
        {
            throw new System.NullReferenceException($"Collection \"Names\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Names.Count());
            foreach (var item in obj.Names)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteString(stream, item);
            }
        }
        if (obj.Numbers is null)
        {
            throw new System.NullReferenceException($"Collection \"Numbers\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Numbers.Count);
            for (int i = 0; i < obj.Numbers.Count; i++)
            {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (Int32)obj.Numbers[i]);
            }
        }
    }
}
