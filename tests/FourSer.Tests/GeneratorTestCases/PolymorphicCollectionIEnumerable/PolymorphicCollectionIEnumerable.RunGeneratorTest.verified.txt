// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionIEnumerable;

public partial class Inventory : ISerializable<Inventory>
{
    public static int GetPacketSize(Inventory obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Items
        size += sizeof(Byte); // Size for polymorphic type id
        if (obj.Items is not null)
        {
            foreach (var item in obj.Items)
            {
                size += item switch
                {
                    Sword sword => Sword.GetPacketSize(sword),
                    Shield shield => Shield.GetPacketSize(shield),
                    Potion potion => Potion.GetPacketSize(potion),
                    _ => throw new System.IO.InvalidDataException($"Unknown item type in collection Items: {item.GetType().Name}")
                };
            }
        }
        return size;
    }

    private Inventory(System.Collections.Generic.IEnumerable<FourSer.Tests.GeneratorTestCases.PolymorphicCollectionIEnumerable.Item> items)
    {
        this.Items = items;
    }

    public Inventory()
    {
        this.Items = default;
    }

    public static Inventory Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var itemsCount = SpanReader.ReadInt32(ref buffer);
        var items = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicCollectionIEnumerable.Item>(itemsCount);
        var itemsTypeId = SpanReader.ReadByte(ref buffer);
        switch (itemsTypeId)
        {
            case 10:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Sword.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            case 20:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Shield.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            case 30:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Potion.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Items: {itemsTypeId}");
        }
        var obj = new Inventory(items);
        return obj;
    }

    public static Inventory Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static Inventory Deserialize(System.IO.Stream stream)
    {
        var itemsCount = StreamReader.ReadInt32(stream);
        var items = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicCollectionIEnumerable.Item>(itemsCount);
        var itemsTypeId = StreamReader.ReadByte(stream);
        switch (itemsTypeId)
        {
            case 10:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Sword.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            case 20:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Shield.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            case 30:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Potion.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Items: {itemsTypeId}");
        }
        var obj = new Inventory(items);
        return obj;
    }

    public static int Serialize(Inventory obj, System.Span<byte> data)
    {
        var originalData = data;
        var countSpan = data;
        data = data.Slice(sizeof(int));
        int count = 0;
        using var enumerator = obj.Items.GetEnumerator();
        if (!enumerator.MoveNext())
        {
            SpanWriter.WriteByte(ref data, (Byte)(10));
            SpanWriter.WriteInt32(ref countSpan, (int)(0));
        }
        else
        {
            var discriminator = enumerator.Current switch
            {
                Sword => (Byte)10,
                Shield => (Byte)20,
                Potion => (Byte)30,
                _ => throw new System.IO.InvalidDataException($"Unknown item type: {enumerator.Current.GetType().Name}")
            };
            SpanWriter.WriteByte(ref data, (Byte)(discriminator));
            switch (discriminator)
            {
                case 10:
                {
                    do
                    {
                        var bytesWritten = Sword.Serialize((Sword)enumerator.Current, data);
                        data = data.Slice(bytesWritten);
                        count++;
                    }
                    while (enumerator.MoveNext());
                    break;
                }
                case 20:
                {
                    do
                    {
                        var bytesWritten = Shield.Serialize((Shield)enumerator.Current, data);
                        data = data.Slice(bytesWritten);
                        count++;
                    }
                    while (enumerator.MoveNext());
                    break;
                }
                case 30:
                {
                    do
                    {
                        var bytesWritten = Potion.Serialize((Potion)enumerator.Current, data);
                        data = data.Slice(bytesWritten);
                        count++;
                    }
                    while (enumerator.MoveNext());
                    break;
                }
            }
            SpanWriter.WriteInt32(ref countSpan, (int)(count));
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(Inventory obj, System.IO.Stream stream)
    {
        if (!stream.CanSeek)
        {
            throw new NotSupportedException("Stream must be seekable to serialize this collection.");
        }
        var countPosition = stream.Position;
        StreamWriter.WriteInt32(stream, (int)(0)); // Placeholder for count
        int count = 0;
        using var enumerator = obj.Items.GetEnumerator();
        if (!enumerator.MoveNext())
        {
            StreamWriter.WriteByte(stream, (Byte)(10));
        }
        else
        {
            var discriminator = enumerator.Current switch
            {
                Sword => (Byte)10,
                Shield => (Byte)20,
                Potion => (Byte)30,
                _ => throw new System.IO.InvalidDataException($"Unknown item type: {enumerator.Current.GetType().Name}")
            };
            StreamWriter.WriteByte(stream, (Byte)(discriminator));
            switch (discriminator)
            {
                case 10:
                {
                    do
                    {
                        Sword.Serialize((Sword)enumerator.Current, stream);
                        count++;
                    }
                    while (enumerator.MoveNext());
                    break;
                }
                case 20:
                {
                    do
                    {
                        Shield.Serialize((Shield)enumerator.Current, stream);
                        count++;
                    }
                    while (enumerator.MoveNext());
                    break;
                }
                case 30:
                {
                    do
                    {
                        Potion.Serialize((Potion)enumerator.Current, stream);
                        count++;
                    }
                    while (enumerator.MoveNext());
                    break;
                }
            }
            var endPosition = stream.Position;
            stream.Position = countPosition;
            StreamWriter.WriteInt32(stream, (int)(count));
            stream.Position = endPosition;
        }
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionIEnumerable;

public partial class Item : ISerializable<Item>
{
    public static int GetPacketSize(Item obj)
    {
        var size = 0;
        return size;
    }

    public Item()
    {
    }

    public static Item Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Item();
        return obj;
    }

    public static Item Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static Item Deserialize(System.IO.Stream stream)
    {
        var obj = new Item();
        return obj;
    }

    public static int Serialize(Item obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Item obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionIEnumerable;

public partial class Sword : ISerializable<Sword>
{
    public static int GetPacketSize(Sword obj)
    {
        var size = 0;
        return size;
    }

    public Sword()
    {
    }

    public static new Sword Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Sword();
        return obj;
    }

    public static new Sword Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Sword Deserialize(System.IO.Stream stream)
    {
        var obj = new Sword();
        return obj;
    }

    public static int Serialize(Sword obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Sword obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionIEnumerable;

public partial class Shield : ISerializable<Shield>
{
    public static int GetPacketSize(Shield obj)
    {
        var size = 0;
        return size;
    }

    public Shield()
    {
    }

    public static new Shield Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Shield();
        return obj;
    }

    public static new Shield Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Shield Deserialize(System.IO.Stream stream)
    {
        var obj = new Shield();
        return obj;
    }

    public static int Serialize(Shield obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Shield obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionIEnumerable;

public partial class Potion : ISerializable<Potion>
{
    public static int GetPacketSize(Potion obj)
    {
        var size = 0;
        return size;
    }

    public Potion()
    {
    }

    public static new Potion Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Potion();
        return obj;
    }

    public static new Potion Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Potion Deserialize(System.IO.Stream stream)
    {
        var obj = new Potion();
        return obj;
    }

    public static int Serialize(Potion obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Potion obj, System.IO.Stream stream)
    {
    }
}
