// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.NestedObject;

public partial class ContainerPacket : ISerializable<ContainerPacket>
{
    public static int GetPacketSize(ContainerPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += NestedData.GetPacketSize(obj.Data); // Size for nested type Data
        return size;
    }

    private ContainerPacket(int id, FourSer.Tests.GeneratorTestCases.NestedObject.NestedData data)
    {
        this.Id = id;
        this.Data = data;
    }

    public ContainerPacket()
    {
        this.Id = default;
        this.Data = default;
    }

    public static ContainerPacket Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var data = NestedData.Deserialize(buffer, out var nestedBytesRead);
        buffer = buffer.Slice(nestedBytesRead);
        var obj = new ContainerPacket(id, data);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(ContainerPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        var bytesWritten = NestedData.Serialize(obj.Data, data);
        data = data.Slice(bytesWritten);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.NestedObject;

public partial class NestedData : ISerializable<NestedData>
{
    public static int GetPacketSize(NestedData obj)
    {
        var size = 0;
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        size += sizeof(float); // Size for unmanaged type Value
        return size;
    }

    private NestedData(string name, float value)
    {
        this.Name = name;
        this.Value = value;
    }

    public NestedData()
    {
        this.Name = default;
        this.Value = default;
    }

    public static NestedData Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var name = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var value = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadSingle(ref buffer);
        var obj = new NestedData(name, value);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(NestedData obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, obj.Name);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteSingle(ref data, (Single)obj.Value);
        return originalData.Length - data.Length;
    }
}
