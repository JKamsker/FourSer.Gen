// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.NestedObject;

public partial class ContainerPacket : ISerializable<ContainerPacket>
{
    public static int GetPacketSize(ContainerPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += NestedData.GetPacketSize(obj.Data); // Size for nested type Data
        return size;
    }

    private ContainerPacket(int id, FourSer.Tests.GeneratorTestCases.NestedObject.NestedData data)
    {
        this.Id = id;
        this.Data = data;
    }

    public ContainerPacket()
    {
        this.Id = default;
        this.Data = default;
    }

    public static ContainerPacket Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var id = SpanReader.ReadInt32(ref buffer);
        var data = NestedData.Deserialize(ref buffer);
        var obj = new ContainerPacket(id, data);
        return obj;
    }

    public static ContainerPacket Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static ContainerPacket Deserialize(System.IO.Stream stream)
    {
        var id = StreamReader.ReadInt32(stream);
        var data = NestedData.Deserialize(stream);
        var obj = new ContainerPacket(id, data);
        return obj;
    }

    public static int Serialize(ContainerPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteInt32(ref data, (Int32)obj.Id);
        if (obj.Data is null)
        {
            throw new System.NullReferenceException($"Property \"Data\" cannot be null.");
        }
        var bytesWritten = NestedData.Serialize(obj.Data, data);
        data = data.Slice(bytesWritten);
        return originalData.Length - data.Length;
    }

    public static void Serialize(ContainerPacket obj, System.IO.Stream stream)
    {
        StreamWriter.WriteInt32(stream, (Int32)obj.Id);
        if (obj.Data is null)
        {
            throw new System.NullReferenceException($"Property \"Data\" cannot be null.");
        }
        NestedData.Serialize(obj.Data, stream);
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.NestedObject;

public partial class NestedData : ISerializable<NestedData>
{
    public static int GetPacketSize(NestedData obj)
    {
        var size = 0;
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        size += sizeof(float); // Size for unmanaged type Value
        return size;
    }

    private NestedData(string name, float value)
    {
        this.Name = name;
        this.Value = value;
    }

    public NestedData()
    {
        this.Name = default;
        this.Value = default;
    }

    public static NestedData Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var name = SpanReader.ReadString(ref buffer);
        var value = SpanReader.ReadSingle(ref buffer);
        var obj = new NestedData(name, value);
        return obj;
    }

    public static NestedData Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static NestedData Deserialize(System.IO.Stream stream)
    {
        var name = StreamReader.ReadString(stream);
        var value = StreamReader.ReadSingle(stream);
        var obj = new NestedData(name, value);
        return obj;
    }

    public static int Serialize(NestedData obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteString(ref data, obj.Name);
        SpanWriter.WriteSingle(ref data, (Single)obj.Value);
        return originalData.Length - data.Length;
    }

    public static void Serialize(NestedData obj, System.IO.Stream stream)
    {
        StreamWriter.WriteString(stream, obj.Name);
        StreamWriter.WriteSingle(stream, (Single)obj.Value);
    }
}
