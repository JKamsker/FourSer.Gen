// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.NullCollectionStaticCount;

public partial class Item : ISerializable<Item>
{
    public static int GetPacketSize(Item obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        return size;
    }

    private Item(int id)
    {
        this.Id = id;
    }

    public Item()
    {
        this.Id = default;
    }

    public static Item Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var obj = new Item(id);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(Item obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.NullCollectionStaticCount;

public partial class MainObject : ISerializable<MainObject>
{
    public static int GetPacketSize(MainObject obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Items
        foreach(var item in obj.Items)
        {
            size += Item.GetPacketSize(item);
        }
        return size;
    }

    private MainObject(System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.NullCollectionStaticCount.Item> items)
    {
        this.Items = items;
    }

    public MainObject()
    {
        this.Items = default;
    }

    public static MainObject Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var itemsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var items = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.NullCollectionStaticCount.Item>(itemsCount);
        for (int i = 0; i < itemsCount; i++)
        {
            items.Add(Item.Deserialize(buffer, out var itemBytesRead));
            buffer = buffer.Slice(itemBytesRead);
        }
        var obj = new MainObject(items);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(MainObject obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Items is null)
        {
            throw new System.NullReferenceException($"Collection \"Items\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Items.Count);
            for (int i = 0; i < obj.Items.Count; i++)
            {
            var bytesWritten = Item.Serialize(obj.Items[i], data);
            data = data.Slice(bytesWritten);
            }
        }
        return originalData.Length - data.Length;
    }
}
