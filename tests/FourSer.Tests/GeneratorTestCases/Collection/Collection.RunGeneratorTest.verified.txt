// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.Collection;

public partial class CollectionPacket : ISerializable<CollectionPacket>
{
    public static int GetPacketSize(CollectionPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Numbers
        size += obj.Numbers.Count * sizeof(int);
        return size;
    }

    private CollectionPacket(System.Collections.Generic.List<int> numbers)
    {
        this.Numbers = numbers;
    }

    public CollectionPacket()
    {
        this.Numbers = default;
    }

    public static CollectionPacket Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var numbersCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var numbers = new System.Collections.Generic.List<int>(numbersCount);
        for (int i = 0; i < numbersCount; i++)
        {
            numbers.Add(FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer));
        }
        var obj = new CollectionPacket(numbers);
        return obj;
    }

    public static CollectionPacket Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static CollectionPacket Deserialize(System.IO.Stream stream)
    {
        var numbersCount = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var numbers = new System.Collections.Generic.List<int>(numbersCount);
        for (int i = 0; i < numbersCount; i++)
        {
            numbers.Add(FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream));
        }
        var obj = new CollectionPacket(numbers);
        return obj;
    }

    public static int Serialize(CollectionPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Numbers is null)
        {
            throw new System.NullReferenceException($"Collection \"Numbers\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Numbers.Count);
            for (int i = 0; i < obj.Numbers.Count; i++)
            {
                FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Numbers[i]);
            }
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(CollectionPacket obj, System.IO.Stream stream)
    {
        if (obj.Numbers is null)
        {
            throw new System.NullReferenceException($"Collection \"Numbers\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (int)obj.Numbers.Count);
            for (int i = 0; i < obj.Numbers.Count; i++)
            {
                FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, (Int32)obj.Numbers[i]);
            }
        }
    }
}
