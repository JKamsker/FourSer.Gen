// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

public partial class MyGlobalClass : ISerializable<MyGlobalClass>
{
    public static int GetPacketSize(MyGlobalClass obj)
    {
        if (obj is null) return 0;
        var size = 0;
        size += sizeof(int); // Size for unmanaged type MyProperty
        return size;
    }

    private MyGlobalClass(int myProperty)
    {
        this.MyProperty = myProperty;
    }

    public MyGlobalClass()
    {
        this.MyProperty = default;
    }

    public static MyGlobalClass Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var myProperty = SpanReader.ReadInt32(ref buffer);
        var obj = new MyGlobalClass(myProperty);
        return obj;
    }

    public static MyGlobalClass Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static MyGlobalClass Deserialize(System.IO.Stream stream)
    {
        var myProperty = StreamReader.ReadInt32(stream);
        var obj = new MyGlobalClass(myProperty);
        return obj;
    }

    public static void Serialize(MyGlobalClass obj, ref System.Span<byte> data)
    {
        if (obj is null) return;
        SpanWriter.WriteInt32(ref data, (int)(obj.MyProperty));
    }

    public static void Serialize(MyGlobalClass obj, System.Span<byte> data)
    {
        Serialize(obj, ref data);
    }

    public static void Serialize(MyGlobalClass obj, System.IO.Stream stream)
    {
        if (obj is null) return;
        StreamWriter.WriteInt32(stream, (int)(obj.MyProperty));
    }
}
