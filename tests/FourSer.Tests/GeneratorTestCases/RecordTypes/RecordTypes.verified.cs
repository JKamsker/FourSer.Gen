// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.Records;

public partial record class RecordClass : ISerializable<RecordClass>
{
    public static int GetPacketSize(RecordClass obj)
    {
        var size = 0;
        size += 4;
        size += 4;
        size += Encoding.UTF8.GetByteCount(obj.B);
        return size;
    }

    private RecordClass(int a, string b)
    {
        this.A = a;
        this.B = b;
    }

    public static RecordClass Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var a = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var b = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var obj = new RecordClass(a, b);
        return obj;
    }

    public static RecordClass Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static RecordClass Deserialize(System.IO.Stream stream)
    {
        var a = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var b = FourSer.Gen.Helpers.StreamReaderHelpers.ReadString(stream);
        var obj = new RecordClass(a, b);
        return obj;
    }

    public static void Serialize(System.Span<byte> buffer, RecordClass obj)
    {
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref buffer, obj.A);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref buffer, obj.B);
    }

    public static void Serialize(System.IO.Stream stream, RecordClass obj)
    {
        FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, obj.A);
        FourSer.Gen.Helpers.StreamWriterHelpers.WriteString(stream, obj.B);
    }
}

public partial record struct RecordStruct : ISerializable<RecordStruct>
{
    public static int GetPacketSize(RecordStruct obj)
    {
        var size = 0;
        size += 4;
        size += 4;
        size += Encoding.UTF8.GetByteCount(obj.D);
        return size;
    }

    private RecordStruct(int c, string d)
    {
        this.C = c;
        this.D = d;
    }

    public static RecordStruct Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var c = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var d = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var obj = new RecordStruct(c, d);
        return obj;
    }

    public static RecordStruct Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static RecordStruct Deserialize(System.IO.Stream stream)
    {
        var c = FourSer.Gen.Helpers.StreamReaderHelpers.ReadInt32(stream);
        var d = FourSer.Gen.Helpers.StreamReaderHelpers.ReadString(stream);
        var obj = new RecordStruct(c, d);
        return obj;
    }

    public static void Serialize(System.Span<byte> buffer, RecordStruct obj)
    {
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref buffer, obj.C);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref buffer, obj.D);
    }

    public static void Serialize(System.IO.Stream stream, RecordStruct obj)
    {
        FourSer.Gen.Helpers.StreamWriterHelpers.WriteInt32(stream, obj.C);
        FourSer.Gen.Helpers.StreamWriterHelpers.WriteString(stream, obj.D);
    }
}
