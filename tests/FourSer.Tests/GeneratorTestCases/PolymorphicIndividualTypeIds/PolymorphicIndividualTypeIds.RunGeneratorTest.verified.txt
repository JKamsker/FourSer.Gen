// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class PolymorphicIndividualTest : ISerializable<PolymorphicIndividualTest>
{
    public static int GetPacketSize(PolymorphicIndividualTest obj)
    {
        var size = 0;
        size += sizeof(byte); // Count size for Animals
        foreach(var item in obj.Animals)
        {
            size += sizeof(byte);
        switch (item)
        {
            case Cat typedInstance:
                size += Cat.GetPacketSize(typedInstance);
                break;
            case Dog typedInstance:
                size += Dog.GetPacketSize(typedInstance);
                break;
            case null: break;
            default:
                throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
        }
        }
        return size;
    }

<<<<<<< HEAD
    private PolymorphicIndividualTest(System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal> animals)
    {
        this.Animals = animals;
    }

    public PolymorphicIndividualTest()
    {
        this.Animals = default;
    }

    public static PolymorphicIndividualTest Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var animalsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadByte(ref buffer);
        var animals = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal>((int)animalsCount);
        for (int i = 0; i < (int)animalsCount; i++)
        {
            FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal item;
            int itemBytesRead;
            var typeId = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadByte(ref buffer);
            switch (typeId)
            {
                case 1:
                {
                    item = Cat.Deserialize(buffer, out itemBytesRead);
                    buffer = buffer.Slice(itemBytesRead);
                    break;
                }
                case 2:
                {
                    item = Dog.Deserialize(buffer, out itemBytesRead);
                    buffer = buffer.Slice(itemBytesRead);
                    break;
                }
                default:
                    throw new System.IO.InvalidDataException($"Unknown type id for item: {typeId}");
            }
            animals.Add(item);
        }
        var obj = new PolymorphicIndividualTest(animals);
        bytesRead = originalBuffer.Length - buffer.Length;
=======
    public static PolymorphicIndividualTest Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new PolymorphicIndividualTest();
        var AnimalsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadByte(ref data);
        obj.Animals = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal>(AnimalsCount);
        for (int i = 0; i < AnimalsCount; i++)
        {
            FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal item;
            int itemBytesRead;
            var typeId = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadByte(ref data);
            switch ((byte)typeId)
            {
                case 1:
                    item = Cat.Deserialize(data, out itemBytesRead);
                    data = data.Slice(itemBytesRead);
                    break;
                case 2:
                    item = Dog.Deserialize(data, out itemBytesRead);
                    data = data.Slice(itemBytesRead);
                    break;
                default:
                    throw new System.IO.InvalidDataException($"Unknown type id for item: {typeId}");
            }
            obj.Animals.Add(item);
        }
        bytesRead = originalData.Length - data.Length;
>>>>>>> main
        return obj;
    }

    public static int Serialize(PolymorphicIndividualTest obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteByte(ref data, (byte)obj.Animals.Count);
        int AnimalsItemBytesWritten;
        foreach(var item in obj.Animals)
        {
            switch (item)
            {
                case Cat typedInstance:
                    FourSer.Gen.Helpers.SpanWriterHelpers.WriteByte(ref data, (byte)1);
                    AnimalsItemBytesWritten = Cat.Serialize(typedInstance, data);
                    data = data.Slice(AnimalsItemBytesWritten);
                    break;
                case Dog typedInstance:
                    FourSer.Gen.Helpers.SpanWriterHelpers.WriteByte(ref data, (byte)2);
                    AnimalsItemBytesWritten = Dog.Serialize(typedInstance, data);
                    data = data.Slice(AnimalsItemBytesWritten);
                    break;
                case null:
                    break;
                default:
                    throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
            }
        }
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Cat : ISerializable<Cat>
{
    public static int GetPacketSize(Cat obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

<<<<<<< HEAD
    private Cat(int id, string name)
    {
        this.Id = id;
        this.Name = name;
    }

    public Cat()
    {
        this.Id = default;
        this.Name = default;
    }

    public static new Cat Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var name = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var obj = new Cat(id, name);
        bytesRead = originalBuffer.Length - buffer.Length;
=======
    public static new Cat Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Cat();
        obj.Id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Name = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref data);
        bytesRead = originalData.Length - data.Length;
>>>>>>> main
        return obj;
    }

    public static int Serialize(Cat obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, obj.Name);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Dog : ISerializable<Dog>
{
    public static int GetPacketSize(Dog obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Breed); // Size for string Breed
        return size;
    }

<<<<<<< HEAD
    private Dog(int id, string breed)
    {
        this.Id = id;
        this.Breed = breed;
    }

    public Dog()
    {
        this.Id = default;
        this.Breed = default;
    }

    public static new Dog Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var breed = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var obj = new Dog(id, breed);
        bytesRead = originalBuffer.Length - buffer.Length;
=======
    public static new Dog Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Dog();
        obj.Id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Breed = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref data);
        bytesRead = originalData.Length - data.Length;
>>>>>>> main
        return obj;
    }

    public static int Serialize(Dog obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, obj.Breed);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Animal : ISerializable<Animal>
{
    public static int GetPacketSize(Animal obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        return size;
    }

<<<<<<< HEAD
    private Animal(int id)
    {
        this.Id = id;
    }

    public Animal()
    {
        this.Id = default;
    }

    public static Animal Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var obj = new Animal(id);
        bytesRead = originalBuffer.Length - buffer.Length;
=======
    public static Animal Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Animal();
        obj.Id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref data);
        bytesRead = originalData.Length - data.Length;
>>>>>>> main
        return obj;
    }

    public static int Serialize(Animal obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        return originalData.Length - data.Length;
    }
}
