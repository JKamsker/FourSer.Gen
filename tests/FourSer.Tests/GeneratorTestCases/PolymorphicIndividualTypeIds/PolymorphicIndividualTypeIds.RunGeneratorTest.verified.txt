// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class PolymorphicIndividualTest : ISerializable<PolymorphicIndividualTest>
{
    public static int GetPacketSize(PolymorphicIndividualTest obj)
    {
        var size = 0;
        size += sizeof(byte); // Count size for Animals
        if (obj.Animals is not null)
        {
            foreach (var item in obj.Animals)
            {
                size += sizeof(byte); // Size for polymorphic type id
                size += item switch
                {
                    Cat cat => Cat.GetPacketSize(cat),
                    Dog dog => Dog.GetPacketSize(dog),
                    _ => throw new System.IO.InvalidDataException($"Unknown item type in collection Animals: {item.GetType().Name}")
                };
            }
        }
        return size;
    }

    private PolymorphicIndividualTest(System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal> animals)
    {
        this.Animals = animals;
    }

    public PolymorphicIndividualTest()
    {
        this.Animals = default;
    }

    public static PolymorphicIndividualTest Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var animalsCount = SpanReader.ReadByte(ref buffer);
        var animals = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal>(animalsCount);
        for (int i = 0; i < animalsCount; i++)
        {
            FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal item;
            var itemTypeId = SpanReader.ReadByte(ref buffer);
            switch (itemTypeId)
            {
                case 1:
                {
                    item = Cat.Deserialize(ref buffer);
                    break;
                }
                case 2:
                {
                    item = Dog.Deserialize(ref buffer);
                    break;
                }
                default:
                    throw new System.IO.InvalidDataException($"Unknown type id for item: {itemTypeId}");
            }
            animals.Add(item);
        }
        var obj = new PolymorphicIndividualTest(animals);
        return obj;
    }

    public static PolymorphicIndividualTest Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static PolymorphicIndividualTest Deserialize(System.IO.Stream stream)
    {
        var animalsCount = StreamReader.ReadByte(stream);
        var animals = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal>(animalsCount);
        for (int i = 0; i < animalsCount; i++)
        {
            FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds.Animal item;
            var itemTypeId = StreamReader.ReadByte(stream);
            switch (itemTypeId)
            {
                case 1:
                {
                    item = Cat.Deserialize(stream);
                    break;
                }
                case 2:
                {
                    item = Dog.Deserialize(stream);
                    break;
                }
                default:
                    throw new System.IO.InvalidDataException($"Unknown type id for item: {itemTypeId}");
            }
            animals.Add(item);
        }
        var obj = new PolymorphicIndividualTest(animals);
        return obj;
    }

    public static int Serialize(PolymorphicIndividualTest obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Animals is null)
        {
            SpanWriter.WriteByte(ref data, (byte)0);
        }
        else
        {
            SpanWriter.WriteByte(ref data, (byte)obj.Animals.Count);
            foreach(var item in obj.Animals)
            {
                switch (item)
                {
                    case Cat typedInstance:
                    {
                        SpanWriter.WriteByte(ref data, (byte)1);
                        if (typedInstance is null)
                        {
                            throw new System.NullReferenceException($"Instance of type \"Cat\" cannot be null.");
                        }
                        var bytesWritten = Cat.Serialize(typedInstance, data);
                        data = data.Slice(bytesWritten);
                        break;
                    }
                    case Dog typedInstance:
                    {
                        SpanWriter.WriteByte(ref data, (byte)2);
                        if (typedInstance is null)
                        {
                            throw new System.NullReferenceException($"Instance of type \"Dog\" cannot be null.");
                        }
                        var bytesWritten = Dog.Serialize(typedInstance, data);
                        data = data.Slice(bytesWritten);
                        break;
                    }
                    case null:
                        throw new System.NullReferenceException($"Item in collection cannot be null.");
                    default:
                        throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
                }
            }
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(PolymorphicIndividualTest obj, System.IO.Stream stream)
    {
        if (obj.Animals is null)
        {
            StreamWriter.WriteByte(stream, (byte)0);
        }
        else
        {
            StreamWriter.WriteByte(stream, (byte)obj.Animals.Count);
            foreach(var item in obj.Animals)
            {
                switch (item)
                {
                    case Cat typedInstance:
                    {
                        StreamWriter.WriteByte(stream, (byte)1);
                        if (typedInstance is null)
                        {
                            throw new System.NullReferenceException($"Instance of type \"Cat\" cannot be null.");
                        }
                        Cat.Serialize(typedInstance, stream);
                        break;
                    }
                    case Dog typedInstance:
                    {
                        StreamWriter.WriteByte(stream, (byte)2);
                        if (typedInstance is null)
                        {
                            throw new System.NullReferenceException($"Instance of type \"Dog\" cannot be null.");
                        }
                        Dog.Serialize(typedInstance, stream);
                        break;
                    }
                    case null:
                        throw new System.NullReferenceException($"Item in collection cannot be null.");
                    default:
                        throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
                }
            }
        }
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Cat : ISerializable<Cat>
{
    public static int GetPacketSize(Cat obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    private Cat(int id, string name)
    {
        this.Id = id;
        this.Name = name;
    }

    public Cat()
    {
        this.Id = default;
        this.Name = default;
    }

    public static new Cat Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var id = SpanReader.ReadInt32(ref buffer);
        var name = SpanReader.ReadString(ref buffer);
        var obj = new Cat(id, name);
        return obj;
    }

    public static new Cat Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Cat Deserialize(System.IO.Stream stream)
    {
        var id = StreamReader.ReadInt32(stream);
        var name = StreamReader.ReadString(stream);
        var obj = new Cat(id, name);
        return obj;
    }

    public static int Serialize(Cat obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteInt32(ref data, (Int32)obj.Id);
        SpanWriter.WriteString(ref data, obj.Name);
        return originalData.Length - data.Length;
    }

    public static void Serialize(Cat obj, System.IO.Stream stream)
    {
        StreamWriter.WriteInt32(stream, (Int32)obj.Id);
        StreamWriter.WriteString(stream, obj.Name);
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Dog : ISerializable<Dog>
{
    public static int GetPacketSize(Dog obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Breed); // Size for string Breed
        return size;
    }

    private Dog(int id, string breed)
    {
        this.Id = id;
        this.Breed = breed;
    }

    public Dog()
    {
        this.Id = default;
        this.Breed = default;
    }

    public static new Dog Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var id = SpanReader.ReadInt32(ref buffer);
        var breed = SpanReader.ReadString(ref buffer);
        var obj = new Dog(id, breed);
        return obj;
    }

    public static new Dog Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Dog Deserialize(System.IO.Stream stream)
    {
        var id = StreamReader.ReadInt32(stream);
        var breed = StreamReader.ReadString(stream);
        var obj = new Dog(id, breed);
        return obj;
    }

    public static int Serialize(Dog obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteInt32(ref data, (Int32)obj.Id);
        SpanWriter.WriteString(ref data, obj.Breed);
        return originalData.Length - data.Length;
    }

    public static void Serialize(Dog obj, System.IO.Stream stream)
    {
        StreamWriter.WriteInt32(stream, (Int32)obj.Id);
        StreamWriter.WriteString(stream, obj.Breed);
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicIndividualTypeIds;

public partial class Animal : ISerializable<Animal>
{
    public static int GetPacketSize(Animal obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        return size;
    }

    private Animal(int id)
    {
        this.Id = id;
    }

    public Animal()
    {
        this.Id = default;
    }

    public static Animal Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var id = SpanReader.ReadInt32(ref buffer);
        var obj = new Animal(id);
        return obj;
    }

    public static Animal Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static Animal Deserialize(System.IO.Stream stream)
    {
        var id = StreamReader.ReadInt32(stream);
        var obj = new Animal(id);
        return obj;
    }

    public static int Serialize(Animal obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteInt32(ref data, (Int32)obj.Id);
        return originalData.Length - data.Length;
    }

    public static void Serialize(Animal obj, System.IO.Stream stream)
    {
        StreamWriter.WriteInt32(stream, (Int32)obj.Id);
    }
}
