// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.CollectionWithConstSize;

public partial class EnumerableOfReferenceTypes : ISerializable<EnumerableOfReferenceTypes>
{
    public static int GetPacketSize(EnumerableOfReferenceTypes obj)
    {
        var size = 0;
        if (obj.MyList is not null)
        {
            foreach(var item in obj.MyList)
            {
                size += Entity.GetPacketSize(item);
            }
        }
        return size;
    }

    private EnumerableOfReferenceTypes(System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.CollectionWithConstSize.Entity> myList)
    {
        this.MyList = myList;
    }

    public EnumerableOfReferenceTypes()
    {
        this.MyList = default;
    }

    public static EnumerableOfReferenceTypes Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var myList = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.CollectionWithConstSize.Entity>(10);
        for (int i = 0; i < 10; i++)
        {
            myList.Add(Entity.Deserialize(ref buffer));
        }
        var obj = new EnumerableOfReferenceTypes(myList);
        return obj;
    }

    public static EnumerableOfReferenceTypes Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static EnumerableOfReferenceTypes Deserialize(System.IO.Stream stream)
    {
        var myList = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.CollectionWithConstSize.Entity>(10);
        for (int i = 0; i < 10; i++)
        {
            myList.Add(Entity.Deserialize(stream));
        }
        var obj = new EnumerableOfReferenceTypes(myList);
        return obj;
    }

    public static int Serialize(EnumerableOfReferenceTypes obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.MyList is null)
        {
            throw new System.ArgumentNullException(nameof(obj.MyList), "Fixed-size collections cannot be null.");
        }
        if (obj.MyList.Count != 10)
        {
            throw new System.InvalidOperationException($"Collection 'MyList' must have a size of 10 but was {obj.MyList.Count}.");
        }
        for (int i = 0; i < obj.MyList.Count; i++)
        {
            if (obj.MyList[i] is null)
            {
                throw new System.NullReferenceException($"Member 'obj.MyList[i]' cannot be null.");
            }
            var bytesWritten = Entity.Serialize(obj.MyList[i], data);
            data = data.Slice(bytesWritten);
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(EnumerableOfReferenceTypes obj, System.IO.Stream stream)
    {
        if (obj.MyList is null)
        {
            throw new System.ArgumentNullException(nameof(obj.MyList), "Fixed-size collections cannot be null.");
        }
        if (obj.MyList.Count != 10)
        {
            throw new System.InvalidOperationException($"Collection 'MyList' must have a size of 10 but was {obj.MyList.Count}.");
        }
        for (int i = 0; i < obj.MyList.Count; i++)
        {
            if (obj.MyList[i] is null)
            {
                throw new System.NullReferenceException($"Member 'obj.MyList[i]' cannot be null.");
            }
            Entity.Serialize(obj.MyList[i], stream);
        }
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.CollectionWithConstSize;

public partial class Entity : ISerializable<Entity>
{
    public static int GetPacketSize(Entity obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    private Entity(int id, string name)
    {
        this.Id = id;
        this.Name = name;
    }

    public Entity()
    {
        this.Id = default;
        this.Name = default;
    }

    public static Entity Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var id = SpanReader.ReadInt32(ref buffer);
        var name = SpanReader.ReadString(ref buffer);
        var obj = new Entity(id, name);
        return obj;
    }

    public static Entity Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static Entity Deserialize(System.IO.Stream stream)
    {
        var id = StreamReader.ReadInt32(stream);
        var name = StreamReader.ReadString(stream);
        var obj = new Entity(id, name);
        return obj;
    }

    public static int Serialize(Entity obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteInt32(ref data, (Int32)obj.Id);
        SpanWriter.WriteString(ref data, obj.Name);
        return originalData.Length - data.Length;
    }

    public static void Serialize(Entity obj, System.IO.Stream stream)
    {
        StreamWriter.WriteInt32(stream, (Int32)obj.Id);
        StreamWriter.WriteString(stream, obj.Name);
    }
}
