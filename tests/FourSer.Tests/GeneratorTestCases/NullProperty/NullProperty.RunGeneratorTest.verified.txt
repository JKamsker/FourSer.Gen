// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.NullProperty;

public partial class NestedObject : ISerializable<NestedObject>
{
    public static int GetPacketSize(NestedObject obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        return size;
    }

    private NestedObject(int id)
    {
        this.Id = id;
    }

    public NestedObject()
    {
        this.Id = default;
    }

    public static NestedObject Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var id = SpanReader.ReadInt32(ref buffer);
        var obj = new NestedObject(id);
        return obj;
    }

    public static NestedObject Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static NestedObject Deserialize(System.IO.Stream stream)
    {
        var id = StreamReader.ReadInt32(stream);
        var obj = new NestedObject(id);
        return obj;
    }

    public static int Serialize(NestedObject obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteInt32(ref data, (Int32)obj.Id);
        return originalData.Length - data.Length;
    }

    public static void Serialize(NestedObject obj, System.IO.Stream stream)
    {
        StreamWriter.WriteInt32(stream, (Int32)obj.Id);
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.NullProperty;

public partial class MainObject : ISerializable<MainObject>
{
    public static int GetPacketSize(MainObject obj)
    {
        var size = 0;
        size += NestedObject.GetPacketSize(obj.Nested); // Size for nested type Nested
        return size;
    }

    private MainObject(FourSer.Tests.GeneratorTestCases.NullProperty.NestedObject nested)
    {
        this.Nested = nested;
    }

    public MainObject()
    {
        this.Nested = default;
    }

    public static MainObject Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var nested = NestedObject.Deserialize(ref buffer);
        var obj = new MainObject(nested);
        return obj;
    }

    public static MainObject Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static MainObject Deserialize(System.IO.Stream stream)
    {
        var nested = NestedObject.Deserialize(stream);
        var obj = new MainObject(nested);
        return obj;
    }

    public static int Serialize(MainObject obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Nested is null)
        {
            throw new System.NullReferenceException($"Property \"Nested\" cannot be null.");
        }
        var bytesWritten = NestedObject.Serialize(obj.Nested, data);
        data = data.Slice(bytesWritten);
        return originalData.Length - data.Length;
    }

    public static void Serialize(MainObject obj, System.IO.Stream stream)
    {
        if (obj.Nested is null)
        {
            throw new System.NullReferenceException($"Property \"Nested\" cannot be null.");
        }
        NestedObject.Serialize(obj.Nested, stream);
    }
}
