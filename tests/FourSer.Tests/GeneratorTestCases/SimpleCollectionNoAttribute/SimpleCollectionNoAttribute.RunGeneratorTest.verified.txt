// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.SimpleCollectionNoAttribute;

public partial class MyPacket : ISerializable<MyPacket>
{
    public static int GetPacketSize(MyPacket obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Data
        size += obj.Data.Count * sizeof(byte);
        return size;
    }

    private MyPacket(System.Collections.Generic.List<byte> data)
    {
        this.Data = data;
    }

    public MyPacket()
    {
        this.Data = default;
    }

    public static MyPacket Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var dataCount = SpanReader.ReadInt32(ref buffer);
        var data = SpanReader.ReadBytes(ref buffer, (int)dataCount).ToList();
        var obj = new MyPacket(data);
        return obj;
    }

    public static MyPacket Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static MyPacket Deserialize(System.IO.Stream stream)
    {
        var dataCount = StreamReader.ReadInt32(stream);
        var data = StreamReader.ReadBytes(stream, (int)dataCount).ToList();
        var obj = new MyPacket(data);
        return obj;
    }

    public static int Serialize(MyPacket obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Data is null)
        {
            SpanWriter.WriteInt32(ref data, (int)(0));
        }
        else
        {
            SpanWriter.WriteInt32(ref data, (int)(obj.Data.Count));
            SpanWriter.WriteBytes(ref data, obj.Data);
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(MyPacket obj, System.IO.Stream stream)
    {
        if (obj.Data is null)
        {
            StreamWriter.WriteInt32(stream, (int)(0));
        }
        else
        {
            StreamWriter.WriteInt32(stream, (int)(obj.Data.Count));
            StreamWriter.WriteBytes(stream, obj.Data);
        }
    }
}
