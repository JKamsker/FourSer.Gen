// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.CollectionULongCount;

public partial class ULongCountTest : ISerializable<ULongCountTest>
{
    public static int GetPacketSize(ULongCountTest obj)
    {
        var size = 0;
        size += sizeof(ulong); // Count size for Cats
        foreach(var item in obj.Cats)
        {
            size += Cat.GetPacketSize(item);
        }
        return size;
    }

    private ULongCountTest(System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.CollectionULongCount.Cat> cats)
    {
        this.Cats = cats;
    }

    public ULongCountTest()
    {
        this.Cats = default;
    }

    public static ULongCountTest Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var catsCount = SpanReader.ReadUInt64(ref buffer);
        var cats = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.CollectionULongCount.Cat>((int)catsCount);
        for (int i = 0; i < (int)catsCount; i++)
        {
            cats.Add(Cat.Deserialize(ref buffer));
        }
        var obj = new ULongCountTest(cats);
        return obj;
    }

    public static ULongCountTest Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static ULongCountTest Deserialize(System.IO.Stream stream)
    {
        var catsCount = StreamReader.ReadUInt64(stream);
        var cats = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.CollectionULongCount.Cat>((int)catsCount);
        for (int i = 0; i < (int)catsCount; i++)
        {
            cats.Add(Cat.Deserialize(stream));
        }
        var obj = new ULongCountTest(cats);
        return obj;
    }

    public static int Serialize(ULongCountTest obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Cats is null)
        {
            SpanWriter.WriteUInt64(ref data, (ulong)0);
        }
        else
        {
            SpanWriter.WriteUInt64(ref data, (ulong)obj.Cats.Count);
            for (int i = 0; i < obj.Cats.Count; i++)
            {
                var bytesWritten = Cat.Serialize(obj.Cats[i], data);
                data = data.Slice(bytesWritten);
            }
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(ULongCountTest obj, System.IO.Stream stream)
    {
        if (obj.Cats is null)
        {
            StreamWriter.WriteUInt64(stream, (ulong)0);
        }
        else
        {
            StreamWriter.WriteUInt64(stream, (ulong)obj.Cats.Count);
            for (int i = 0; i < obj.Cats.Count; i++)
            {
                Cat.Serialize(obj.Cats[i], stream);
            }
        }
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.CollectionULongCount;

public partial class Cat : ISerializable<Cat>
{
    public static int GetPacketSize(Cat obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    private Cat(int id, string name)
    {
        this.Id = id;
        this.Name = name;
    }

    public Cat()
    {
        this.Id = default;
        this.Name = default;
    }

    public static Cat Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var id = SpanReader.ReadInt32(ref buffer);
        var name = SpanReader.ReadString(ref buffer);
        var obj = new Cat(id, name);
        return obj;
    }

    public static Cat Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static Cat Deserialize(System.IO.Stream stream)
    {
        var id = StreamReader.ReadInt32(stream);
        var name = StreamReader.ReadString(stream);
        var obj = new Cat(id, name);
        return obj;
    }

    public static int Serialize(Cat obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteInt32(ref data, (Int32)obj.Id);
        SpanWriter.WriteString(ref data, obj.Name);
        return originalData.Length - data.Length;
    }

    public static void Serialize(Cat obj, System.IO.Stream stream)
    {
        StreamWriter.WriteInt32(stream, (Int32)obj.Id);
        StreamWriter.WriteString(stream, obj.Name);
    }
}
