// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.CollectionULongCount;

public partial class ULongCountTest : ISerializable<ULongCountTest>
{
    public static int GetPacketSize(ULongCountTest obj)
    {
        var size = 0;
        size += sizeof(ulong); // Count size for Cats
        foreach(var item in obj.Cats)
        {
            size += Cat.GetPacketSize(item);
        }
        return size;
    }

    public static ULongCountTest Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new ULongCountTest();
        var CatsCount = RoSpanReaderHelpers.ReadUInt64(ref data);
        obj.Cats = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.CollectionULongCount.Cat>(CatsCount);
        for (int i = 0; i < CatsCount; i++)
        {
            obj.Cats.Add(Cat.Deserialize(data, out var itemBytesRead));
            data = data.Slice(itemBytesRead);
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(ULongCountTest obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriterHelpers.WriteUInt64(ref data, (ulong)obj.Cats.Count);
        for (int i = 0; i < obj.Cats.Count; i++)
        {
            var bytesWritten = Cat.Serialize(obj.Cats[i], data);
            data = data.Slice(bytesWritten);
        }
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.CollectionULongCount;

public partial class Cat : ISerializable<Cat>
{
    public static int GetPacketSize(Cat obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    public static Cat Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Cat();
        obj.Id = RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Name = RoSpanReaderHelpers.ReadString(ref data);
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Cat obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        SpanWriterHelpers.WriteString(ref data, obj.Name);
        return originalData.Length - data.Length;
    }
}
