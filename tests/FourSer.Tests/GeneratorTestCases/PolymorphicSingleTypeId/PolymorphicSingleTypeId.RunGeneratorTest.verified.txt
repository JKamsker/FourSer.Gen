// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicSingleTypeId;

public partial class PolymorphicSingleTest : ISerializable<PolymorphicSingleTest>
{
    public static int GetPacketSize(PolymorphicSingleTest obj)
    {
        var size = 0;
        size += sizeof(byte); // Size for unmanaged type AnimalTypeId
        size += sizeof(ushort); // Count size for Animals
        foreach(var item in obj.Animals)
        {
        switch (item)
        {
            case Cat typedInstance:
                size += Cat.GetPacketSize(typedInstance);
                break;
            case Dog typedInstance:
                size += Dog.GetPacketSize(typedInstance);
                break;
            case null: break;
            default:
                throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
        }
        }
        return size;
    }

    private PolymorphicSingleTest(byte animalTypeId, System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicSingleTypeId.Animal> animals)
    {
        this.AnimalTypeId = animalTypeId;
        this.Animals = animals;
    }

    public PolymorphicSingleTest()
    {
        this.AnimalTypeId = default;
        this.Animals = default;
    }

    public static PolymorphicSingleTest Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var animalTypeId = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadByte(ref buffer);
        var animalsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadUInt16(ref buffer);
        var animals = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicSingleTypeId.Animal>((int)animalsCount);
        switch (animalTypeId)
        {
            case 1:
            {
                for (int i = 0; i < animalsCount; i++)
                {
                    var item = Cat.Deserialize(buffer, out var itemBytesRead);
                    animals.Add(item);
                    buffer = buffer.Slice(itemBytesRead);
                }
                break;
            }
            case 2:
            {
                for (int i = 0; i < animalsCount; i++)
                {
                    var item = Dog.Deserialize(buffer, out var itemBytesRead);
                    animals.Add(item);
                    buffer = buffer.Slice(itemBytesRead);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Animals: {animalTypeId}");
        }
        var obj = new PolymorphicSingleTest(animalTypeId, animals);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(PolymorphicSingleTest obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteByte(ref data, (Byte)obj.AnimalTypeId);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteUInt16(ref data, (ushort)obj.Animals.Count);
        switch (obj.AnimalTypeId)
        {
            case 1:
            {
                foreach(var item in obj.Animals)
                {
                    var bytesWritten = Cat.Serialize((Cat)item, data);
                    data = data.Slice(bytesWritten);
                }
                break;
            }
            case 2:
            {
                foreach(var item in obj.Animals)
                {
                    var bytesWritten = Dog.Serialize((Dog)item, data);
                    data = data.Slice(bytesWritten);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Animals: {obj.AnimalTypeId}");
        }
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicSingleTypeId;

public partial class Cat : ISerializable<Cat>
{
    public static int GetPacketSize(Cat obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    private Cat(int id, string name)
    {
        this.Id = id;
        this.Name = name;
    }

    public Cat()
    {
        this.Id = default;
        this.Name = default;
    }

    public static new Cat Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var name = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var obj = new Cat(id, name);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(Cat obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, obj.Name);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicSingleTypeId;

public partial class Dog : ISerializable<Dog>
{
    public static int GetPacketSize(Dog obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Breed); // Size for string Breed
        return size;
    }

    private Dog(int id, string breed)
    {
        this.Id = id;
        this.Breed = breed;
    }

    public Dog()
    {
        this.Id = default;
        this.Breed = default;
    }

    public static new Dog Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var breed = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var obj = new Dog(id, breed);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(Dog obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, obj.Breed);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicSingleTypeId;

public partial class Animal : ISerializable<Animal>
{
    public static int GetPacketSize(Animal obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        return size;
    }

    private Animal(int id)
    {
        this.Id = id;
    }

    public Animal()
    {
        this.Id = default;
    }

    public static Animal Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var id = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var obj = new Animal(id);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(Animal obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Id);
        return originalData.Length - data.Length;
    }
}
