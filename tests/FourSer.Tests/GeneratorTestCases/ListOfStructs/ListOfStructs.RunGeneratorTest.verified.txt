// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.ListOfStructs;

public partial struct MyStruct : ISerializable<MyStruct>
{
    public static int GetPacketSize(MyStruct obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type A
        return size;
    }

    private MyStruct(int a)
    {
        this.A = a;
    }


    public static MyStruct Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var a = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var obj = new MyStruct(a);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(MyStruct obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.A);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.ListOfStructs;

public partial class PacketWithListOfStructs : ISerializable<PacketWithListOfStructs>
{
    public static int GetPacketSize(PacketWithListOfStructs obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Structs
        foreach(var item in obj.Structs)
        {
            size += MyStruct.GetPacketSize(item);
        }
        return size;
    }

    private PacketWithListOfStructs(System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.ListOfStructs.MyStruct> structs)
    {
        this.Structs = structs;
    }

    public PacketWithListOfStructs()
    {
        this.Structs = default;
    }

    public static PacketWithListOfStructs Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var structsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var structs = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.ListOfStructs.MyStruct>(structsCount);
        for (int i = 0; i < structsCount; i++)
        {
            structs.Add(MyStruct.Deserialize(buffer, out var itemBytesRead));
            buffer = buffer.Slice(itemBytesRead);
        }
        var obj = new PacketWithListOfStructs(structs);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(PacketWithListOfStructs obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Structs is null)
        {
            throw new System.NullReferenceException($"Collection \"Structs\" cannot be null.");
        }
        else
        {
            FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Structs.Count);
            for (int i = 0; i < obj.Structs.Count; i++)
            {
            var bytesWritten = MyStruct.Serialize(obj.Structs[i], data);
            data = data.Slice(bytesWritten);
            }
        }
        return originalData.Length - data.Length;
    }
}
