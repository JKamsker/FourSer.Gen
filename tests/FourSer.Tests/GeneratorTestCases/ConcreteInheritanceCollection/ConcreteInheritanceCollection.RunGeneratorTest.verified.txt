// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection;

public partial class ConcreteInheritanceTest : ISerializable<ConcreteInheritanceTest>
{
    public static int GetPacketSize(ConcreteInheritanceTest obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Dogs
        foreach(var item in obj.Dogs)
        {
            size += Dog.GetPacketSize(item);
        }
        return size;
    }

    public static ConcreteInheritanceTest Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new ConcreteInheritanceTest();
        var DogsCount = RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Dogs = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection.Dog>(DogsCount);
        for (int i = 0; i < DogsCount; i++)
        {
            obj.Dogs.Add(Dog.Deserialize(data, out var itemBytesRead));
            data = data.Slice(itemBytesRead);
        }
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(ConcreteInheritanceTest obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriterHelpers.WriteInt32(ref data, (int)obj.Dogs.Count);
        for (int i = 0; i < obj.Dogs.Count; i++)
        {
            var bytesWritten = Dog.Serialize(obj.Dogs[i], data);
            data = data.Slice(bytesWritten);
        }
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection;

public partial class Dog : ISerializable<Dog>
{
    public static int GetPacketSize(Dog obj)
    {
        var size = 0;
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        size += sizeof(int); // Size for unmanaged type Age
        size += StringEx.MeasureSize(obj.Breed); // Size for string Breed
        return size;
    }

    public static new Dog Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Dog();
        obj.Name = RoSpanReaderHelpers.ReadString(ref data);
        obj.Age = RoSpanReaderHelpers.ReadInt32(ref data);
        obj.Breed = RoSpanReaderHelpers.ReadString(ref data);
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Dog obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriterHelpers.WriteString(ref data, obj.Name);
        SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Age);
        SpanWriterHelpers.WriteString(ref data, obj.Breed);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection;

public partial class Pet : ISerializable<Pet>
{
    public static int GetPacketSize(Pet obj)
    {
        var size = 0;
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        size += sizeof(int); // Size for unmanaged type Age
        return size;
    }

    public static Pet Deserialize(System.ReadOnlySpan<byte> data, out int bytesRead)
    {
        bytesRead = 0;
        var originalData = data;
        var obj = new Pet();
        obj.Name = RoSpanReaderHelpers.ReadString(ref data);
        obj.Age = RoSpanReaderHelpers.ReadInt32(ref data);
        bytesRead = originalData.Length - data.Length;
        return obj;
    }

    public static int Serialize(Pet obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriterHelpers.WriteString(ref data, obj.Name);
        SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Age);
        return originalData.Length - data.Length;
    }
}
