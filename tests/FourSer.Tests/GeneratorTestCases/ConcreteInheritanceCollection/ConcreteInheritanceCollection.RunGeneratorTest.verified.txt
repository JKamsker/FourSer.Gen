// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection;

public partial class ConcreteInheritanceTest : ISerializable<ConcreteInheritanceTest>
{
    public static int GetPacketSize(ConcreteInheritanceTest obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Dogs
        foreach(var item in obj.Dogs)
        {
            size += Dog.GetPacketSize(item);
        }
        return size;
    }

    private ConcreteInheritanceTest(System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection.Dog> dogs)
    {
        this.Dogs = dogs;
    }

    public ConcreteInheritanceTest()
    {
        this.Dogs = default;
    }

    public static ConcreteInheritanceTest Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var dogsCount = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var dogs = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection.Dog>(dogsCount);
        for (int i = 0; i < dogsCount; i++)
        {
            dogs.Add(Dog.Deserialize(buffer, out var itemBytesRead));
            buffer = buffer.Slice(itemBytesRead);
        }
        var obj = new ConcreteInheritanceTest(dogs);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(ConcreteInheritanceTest obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (int)obj.Dogs.Count);
        for (int i = 0; i < obj.Dogs.Count; i++)
        {
            var bytesWritten = Dog.Serialize(obj.Dogs[i], data);
            data = data.Slice(bytesWritten);
        }
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection;

public partial class Dog : ISerializable<Dog>
{
    public static int GetPacketSize(Dog obj)
    {
        var size = 0;
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        size += sizeof(int); // Size for unmanaged type Age
        size += StringEx.MeasureSize(obj.Breed); // Size for string Breed
        return size;
    }

    private Dog(string name, int age, string breed)
    {
        this.Name = name;
        this.Age = age;
        this.Breed = breed;
    }

    public Dog()
    {
        this.Name = default;
        this.Age = default;
        this.Breed = default;
    }

    public static new Dog Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var name = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var age = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var breed = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var obj = new Dog(name, age, breed);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(Dog obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, obj.Name);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Age);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, obj.Breed);
        return originalData.Length - data.Length;
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;

namespace FourSer.Tests.GeneratorTestCases.ConcreteInheritanceCollection;

public partial class Pet : ISerializable<Pet>
{
    public static int GetPacketSize(Pet obj)
    {
        var size = 0;
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        size += sizeof(int); // Size for unmanaged type Age
        return size;
    }

    private Pet(string name, int age)
    {
        this.Name = name;
        this.Age = age;
    }

    public Pet()
    {
        this.Name = default;
        this.Age = default;
    }

    public static Pet Deserialize(System.ReadOnlySpan<byte> buffer, out int bytesRead)
    {
        var originalBuffer = buffer;
        var name = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadString(ref buffer);
        var age = FourSer.Gen.Helpers.RoSpanReaderHelpers.ReadInt32(ref buffer);
        var obj = new Pet(name, age);
        bytesRead = originalBuffer.Length - buffer.Length;
        return obj;
    }

    public static int Serialize(Pet obj, System.Span<byte> data)
    {
        var originalData = data;
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteString(ref data, obj.Name);
        FourSer.Gen.Helpers.SpanWriterHelpers.WriteInt32(ref data, (Int32)obj.Age);
        return originalData.Length - data.Length;
    }
}
