// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.TestUser.CollectionWithCountSizeReference;

public partial class InventoryWithCountSizeRef : ISerializable<InventoryWithCountSizeRef>
{
    public static int GetPacketSize(InventoryWithCountSizeRef obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type TypeId
        size += sizeof(int); // Size for unmanaged type Count
        if (obj.Items is not null)
        {
            foreach (var item in obj.Items)
            {
                size += item switch
                {
                    Sword sword => Sword.GetPacketSize(sword),
                    Shield shield => Shield.GetPacketSize(shield),
                    Potion potion => Potion.GetPacketSize(potion),
                    _ => throw new System.IO.InvalidDataException($"Unknown item type in collection Items: {item.GetType().Name}")
                };
            }
        }
        return size;
    }

    private InventoryWithCountSizeRef(int typeId, int count, System.Collections.Generic.List<FourSer.TestUser.CollectionWithCountSizeReference.Item> items)
    {
        this.TypeId = typeId;
        this.Count = count;
        this.Items = items;
    }

    public InventoryWithCountSizeRef()
    {
        this.TypeId = default;
        this.Count = default;
        this.Items = default;
    }

    public static InventoryWithCountSizeRef Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var typeId = SpanReader.ReadInt32(ref buffer);
        var count = SpanReader.ReadInt32(ref buffer);
        var items = new System.Collections.Generic.List<FourSer.TestUser.CollectionWithCountSizeReference.Item>(count);
        switch (typeId)
        {
            case 10:
            {
                for (int i = 0; i < count; i++)
                {
                    var item = Sword.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            case 20:
            {
                for (int i = 0; i < count; i++)
                {
                    var item = Shield.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            case 30:
            {
                for (int i = 0; i < count; i++)
                {
                    var item = Potion.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Items: {typeId}");
        }
        var obj = new InventoryWithCountSizeRef(typeId, count, items);
        return obj;
    }

    public static InventoryWithCountSizeRef Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static InventoryWithCountSizeRef Deserialize(System.IO.Stream stream)
    {
        var typeId = StreamReader.ReadInt32(stream);
        var count = StreamReader.ReadInt32(stream);
        var items = new System.Collections.Generic.List<FourSer.TestUser.CollectionWithCountSizeReference.Item>(count);
        switch (typeId)
        {
            case 10:
            {
                for (int i = 0; i < count; i++)
                {
                    var item = Sword.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            case 20:
            {
                for (int i = 0; i < count; i++)
                {
                    var item = Shield.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            case 30:
            {
                for (int i = 0; i < count; i++)
                {
                    var item = Potion.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Items: {typeId}");
        }
        var obj = new InventoryWithCountSizeRef(typeId, count, items);
        return obj;
    }

    public static int Serialize(InventoryWithCountSizeRef obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Items is not null && obj.Items.Count > 0)
        {
            switch (obj.Items[0])
            {
                case Sword:
                    obj.TypeId = 10;
                    break;
                case Shield:
                    obj.TypeId = 20;
                    break;
                case Potion:
                    obj.TypeId = 30;
                    break;
            }
        }
        SpanWriter.WriteInt32(ref data, (Int32)obj.TypeId);
        SpanWriter.WriteInt32(ref data, (Int32)obj.Count);
        if (obj.Items is null)
        {
            SpanWriter.WriteInt32(ref data, (int)0);
        }
        else
        {
            switch (obj.TypeId)
            {
                case 10:
                {
                    foreach(var item in obj.Items)
                    {
                        var bytesWritten = Sword.Serialize((Sword)item, data);
                        data = data.Slice(bytesWritten);
                    }
                    break;
                }
                case 20:
                {
                    foreach(var item in obj.Items)
                    {
                        var bytesWritten = Shield.Serialize((Shield)item, data);
                        data = data.Slice(bytesWritten);
                    }
                    break;
                }
                case 30:
                {
                    foreach(var item in obj.Items)
                    {
                        var bytesWritten = Potion.Serialize((Potion)item, data);
                        data = data.Slice(bytesWritten);
                    }
                    break;
                }
                default:
                    throw new System.IO.InvalidDataException($"Unknown type id for Items: {obj.TypeId}");
            }
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(InventoryWithCountSizeRef obj, System.IO.Stream stream)
    {
        if (obj.Items is not null && obj.Items.Count > 0)
        {
            switch (obj.Items[0])
            {
                case Sword:
                    obj.TypeId = 10;
                    break;
                case Shield:
                    obj.TypeId = 20;
                    break;
                case Potion:
                    obj.TypeId = 30;
                    break;
            }
        }
        StreamWriter.WriteInt32(stream, (Int32)obj.TypeId);
        StreamWriter.WriteInt32(stream, (Int32)obj.Count);
        if (obj.Items is null)
        {
            StreamWriter.WriteInt32(stream, (int)0);
        }
        else
        {
            switch (obj.TypeId)
            {
                case 10:
                {
                    foreach(var item in obj.Items)
                    {
                        Sword.Serialize((Sword)item, stream);
                    }
                    break;
                }
                case 20:
                {
                    foreach(var item in obj.Items)
                    {
                        Shield.Serialize((Shield)item, stream);
                    }
                    break;
                }
                case 30:
                {
                    foreach(var item in obj.Items)
                    {
                        Potion.Serialize((Potion)item, stream);
                    }
                    break;
                }
                default:
                    throw new System.IO.InvalidDataException($"Unknown type id for Items: {obj.TypeId}");
            }
        }
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.TestUser.CollectionWithCountSizeReference;

public partial class Item : ISerializable<Item>
{
    public static int GetPacketSize(Item obj)
    {
        var size = 0;
        return size;
    }

    public Item()
    {
    }

    public static Item Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Item();
        return obj;
    }

    public static Item Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static Item Deserialize(System.IO.Stream stream)
    {
        var obj = new Item();
        return obj;
    }

    public static int Serialize(Item obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Item obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.TestUser.CollectionWithCountSizeReference;

public partial class Sword : ISerializable<Sword>
{
    public static int GetPacketSize(Sword obj)
    {
        var size = 0;
        return size;
    }

    public Sword()
    {
    }

    public static new Sword Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Sword();
        return obj;
    }

    public static new Sword Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Sword Deserialize(System.IO.Stream stream)
    {
        var obj = new Sword();
        return obj;
    }

    public static int Serialize(Sword obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Sword obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.TestUser.CollectionWithCountSizeReference;

public partial class Shield : ISerializable<Shield>
{
    public static int GetPacketSize(Shield obj)
    {
        var size = 0;
        return size;
    }

    public Shield()
    {
    }

    public static new Shield Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Shield();
        return obj;
    }

    public static new Shield Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Shield Deserialize(System.IO.Stream stream)
    {
        var obj = new Shield();
        return obj;
    }

    public static int Serialize(Shield obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Shield obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.TestUser.CollectionWithCountSizeReference;

public partial class Potion : ISerializable<Potion>
{
    public static int GetPacketSize(Potion obj)
    {
        var size = 0;
        return size;
    }

    public Potion()
    {
    }

    public static new Potion Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Potion();
        return obj;
    }

    public static new Potion Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Potion Deserialize(System.IO.Stream stream)
    {
        var obj = new Potion();
        return obj;
    }

    public static int Serialize(Potion obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Potion obj, System.IO.Stream stream)
    {
    }
}
