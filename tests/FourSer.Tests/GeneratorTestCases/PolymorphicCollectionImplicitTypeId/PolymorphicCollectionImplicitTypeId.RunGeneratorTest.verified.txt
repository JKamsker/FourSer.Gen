// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionImplicitTypeId;

public partial class Inventory : ISerializable<Inventory>
{
    public static int GetPacketSize(Inventory obj)
    {
        var size = 0;
        size += sizeof(int); // Count size for Items
        size += sizeof(byte); // Size for polymorphic type id
        foreach(var item in obj.Items)
        {
            switch (item)
            {
                case Sword typedInstance:
                    size += Sword.GetPacketSize(typedInstance);
                    break;
                case Shield typedInstance:
                    size += Shield.GetPacketSize(typedInstance);
                    break;
                case Potion typedInstance:
                    size += Potion.GetPacketSize(typedInstance);
                    break;
                case null: break;
                default:
                    throw new System.IO.InvalidDataException($"Unknown type for item: {item?.GetType().FullName}");
            }
        }
        return size;
    }

    private Inventory(System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicCollectionImplicitTypeId.Item> items)
    {
        this.Items = items;
    }

    public Inventory()
    {
        this.Items = default;
    }

    public static Inventory Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var itemsCount = SpanReader.ReadInt32(ref buffer);
        var items = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicCollectionImplicitTypeId.Item>(itemsCount);
        var typeId = SpanReader.ReadByte(ref buffer);
        switch (typeId)
        {
            case 10:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Sword.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            case 20:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Shield.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            case 30:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Potion.Deserialize(ref buffer);
                    items.Add(item);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Items: {typeId}");
        }
        var obj = new Inventory(items);
        return obj;
    }

    public static Inventory Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static Inventory Deserialize(System.IO.Stream stream)
    {
        var itemsCount = StreamReader.ReadInt32(stream);
        var items = new System.Collections.Generic.List<FourSer.Tests.GeneratorTestCases.PolymorphicCollectionImplicitTypeId.Item>(itemsCount);
        var typeId = StreamReader.ReadByte(stream);
        switch (typeId)
        {
            case 10:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Sword.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            case 20:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Shield.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            case 30:
            {
                for (int i = 0; i < itemsCount; i++)
                {
                    var item = Potion.Deserialize(stream);
                    items.Add(item);
                }
                break;
            }
            default:
                throw new System.IO.InvalidDataException($"Unknown type id for Items: {typeId}");
        }
        var obj = new Inventory(items);
        return obj;
    }

    public static int Serialize(Inventory obj, System.Span<byte> data)
    {
        var originalData = data;
        if (obj.Items is null)
        {
            throw new System.NullReferenceException($"Collection \"Items\" cannot be null.");
        }
        else
        {
            SpanWriter.WriteInt32(ref data, (int)obj.Items.Count);
            var firstItem = obj.Items.FirstOrDefault();
            if (firstItem is not null)
            {
                switch(firstItem)
                {
                    case Sword typedInstance:
                    {
                        SpanWriter.WriteByte(ref data, (byte)10);
                        foreach(var item in obj.Items)
                        {
                            var bytesWritten = Sword.Serialize((Sword)item, data);
                            data = data.Slice(bytesWritten);
                        }
                        break;
                    }
                    case Shield typedInstance:
                    {
                        SpanWriter.WriteByte(ref data, (byte)20);
                        foreach(var item in obj.Items)
                        {
                            var bytesWritten = Shield.Serialize((Shield)item, data);
                            data = data.Slice(bytesWritten);
                        }
                        break;
                    }
                    case Potion typedInstance:
                    {
                        SpanWriter.WriteByte(ref data, (byte)30);
                        foreach(var item in obj.Items)
                        {
                            var bytesWritten = Potion.Serialize((Potion)item, data);
                            data = data.Slice(bytesWritten);
                        }
                        break;
                    }
                }
            }
        }
        return originalData.Length - data.Length;
    }

    public static void Serialize(Inventory obj, System.IO.Stream stream)
    {
        if (obj.Items is null)
        {
            throw new System.NullReferenceException($"Collection \"Items\" cannot be null.");
        }
        else
        {
            StreamWriter.WriteInt32(stream, (int)obj.Items.Count);
            var firstItem = obj.Items.FirstOrDefault();
            if (firstItem is not null)
            {
                switch(firstItem)
                {
                    case Sword typedInstance:
                    {
                        StreamWriter.WriteByte(stream, (byte)10);
                        foreach(var item in obj.Items)
                        {
                            Sword.Serialize((Sword)item, stream);
                        }
                        break;
                    }
                    case Shield typedInstance:
                    {
                        StreamWriter.WriteByte(stream, (byte)20);
                        foreach(var item in obj.Items)
                        {
                            Shield.Serialize((Shield)item, stream);
                        }
                        break;
                    }
                    case Potion typedInstance:
                    {
                        StreamWriter.WriteByte(stream, (byte)30);
                        foreach(var item in obj.Items)
                        {
                            Potion.Serialize((Potion)item, stream);
                        }
                        break;
                    }
                }
            }
        }
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionImplicitTypeId;

public partial class Item : ISerializable<Item>
{
    public static int GetPacketSize(Item obj)
    {
        var size = 0;
        return size;
    }

    public Item()
    {
    }

    public static Item Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Item();
        return obj;
    }

    public static Item Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static Item Deserialize(System.IO.Stream stream)
    {
        var obj = new Item();
        return obj;
    }

    public static int Serialize(Item obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Item obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionImplicitTypeId;

public partial class Sword : ISerializable<Sword>
{
    public static int GetPacketSize(Sword obj)
    {
        var size = 0;
        return size;
    }

    public Sword()
    {
    }

    public static new Sword Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Sword();
        return obj;
    }

    public static new Sword Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Sword Deserialize(System.IO.Stream stream)
    {
        var obj = new Sword();
        return obj;
    }

    public static int Serialize(Sword obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Sword obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionImplicitTypeId;

public partial class Shield : ISerializable<Shield>
{
    public static int GetPacketSize(Shield obj)
    {
        var size = 0;
        return size;
    }

    public Shield()
    {
    }

    public static new Shield Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Shield();
        return obj;
    }

    public static new Shield Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Shield Deserialize(System.IO.Stream stream)
    {
        var obj = new Shield();
        return obj;
    }

    public static int Serialize(Shield obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Shield obj, System.IO.Stream stream)
    {
    }
}


// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace FourSer.Tests.GeneratorTestCases.PolymorphicCollectionImplicitTypeId;

public partial class Potion : ISerializable<Potion>
{
    public static int GetPacketSize(Potion obj)
    {
        var size = 0;
        return size;
    }

    public Potion()
    {
    }

    public static new Potion Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var obj = new Potion();
        return obj;
    }

    public static new Potion Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public static new Potion Deserialize(System.IO.Stream stream)
    {
        var obj = new Potion();
        return obj;
    }

    public static int Serialize(Potion obj, System.Span<byte> data)
    {
        var originalData = data;
        return originalData.Length - data.Length;
    }

    public static void Serialize(Potion obj, System.IO.Stream stream)
    {
    }
}
