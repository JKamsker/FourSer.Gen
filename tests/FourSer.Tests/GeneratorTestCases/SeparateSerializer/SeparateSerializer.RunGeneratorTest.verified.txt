// <auto-generated/>
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using FourSer.Contracts;
using System.IO;
using FourSer.Gen.Helpers;
using SpanReader = FourSer.Gen.Helpers.RoSpanReaderHelpers;
using StreamReader = FourSer.Gen.Helpers.StreamReaderHelpers;
using SpanWriter = FourSer.Gen.Helpers.SpanWriterHelpers;
using StreamWriter = FourSer.Gen.Helpers.StreamWriterHelpers;

namespace Testing;

public class MySeparatePacketSerializer : ISerializer<MySeparatePacket>
{
    public int GetPacketSize(MySeparatePacket obj)
    {
        var size = 0;
        size += sizeof(int); // Size for unmanaged type Id
        size += StringEx.MeasureSize(obj.Name); // Size for string Name
        return size;
    }

    public MySeparatePacket Deserialize(ref System.ReadOnlySpan<byte> buffer)
    {
        var id = SpanReader.ReadInt32(ref buffer);
        var name = SpanReader.ReadString(ref buffer);
        var obj = new MySeparatePacket();
        obj.Id = id;
        obj.Name = name;
        return obj;
    }

    public MySeparatePacket Deserialize(System.ReadOnlySpan<byte> buffer)
    {
        return Deserialize(ref buffer);
    }

    public MySeparatePacket Deserialize(System.IO.Stream stream)
    {
        var id = StreamReader.ReadInt32(stream);
        var name = StreamReader.ReadString(stream);
        var obj = new MySeparatePacket();
        obj.Id = id;
        obj.Name = name;
        return obj;
    }

    public int Serialize(MySeparatePacket obj, System.Span<byte> data)
    {
        var originalData = data;
        SpanWriter.WriteInt32(ref data, (Int32)obj.Id);
        SpanWriter.WriteString(ref data, obj.Name);
        return originalData.Length - data.Length;
    }

    public void Serialize(MySeparatePacket obj, System.IO.Stream stream)
    {
        StreamWriter.WriteInt32(stream, (Int32)obj.Id);
        StreamWriter.WriteString(stream, obj.Name);
    }
}
